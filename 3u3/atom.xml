<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>幾文山</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.3u3.me/"/>
  <updated>2021-01-13T05:36:19.729Z</updated>
  <id>https://blog.3u3.me/</id>
  
  <author>
    <name>fewensa</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>走散了</title>
    <link href="https://blog.3u3.me/post/dispersed/"/>
    <id>https://blog.3u3.me/post/dispersed/</id>
    <published>2020-11-14T22:48:40.000Z</published>
    <updated>2021-01-13T05:36:19.729Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>還是走散了.</p>        <div id="aplayer-PsJUynlc" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;"></div>  <script>  var options = {"narrow":false,"autoplay":true,"showlrc":3,"mode":"order","mutex":true,"theme":"#e6d0b2","preload":"auto","listmaxheight":"513px","music":[{"title":"Always","author":"瀧川ありさ","url":"https://mio.0u0.me/music/Always%20-%20%E7%80%A7%E5%B7%9D%E3%81%82%E3%82%8A%E3%81%95.m4a","pic":"https://p1.music.126.net/hm82nYiAhA-ZglW5T8_8rA==/109951163886169752.jpg?param=500y500","lrc":"https://mio.0u0.me/music/Always%20-%20%E7%80%A7%E5%B7%9D%E3%81%82%E3%82%8A%E3%81%95.lrc.txt"},{"title":"Always (Instrumental)","author":"瀧川ありさ","url":"https://mio.0u0.me/music/Always%20(Instrumental)%20-%20%E7%80%A7%E5%B7%9D%E3%81%82%E3%82%8A%E3%81%95.mp3","pic":"https://p1.music.126.net/hm82nYiAhA-ZglW5T8_8rA==/109951163886169752.jpg?param=500y500"}]};  options.element = document.getElementById("aplayer-PsJUynlc");  var ap = new APlayer(options);    window.aplayers || (window.aplayers = []);  window.aplayers.push(ap);  </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="dispersed" scheme="https://blog.3u3.me/tags/dispersed/"/>
    
  </entry>
  
  <entry>
    <title>WebSocket 协议</title>
    <link href="https://blog.3u3.me/post/websocket-protocol/"/>
    <id>https://blog.3u3.me/post/websocket-protocol/</id>
    <published>2020-01-04T21:05:26.000Z</published>
    <updated>2021-01-13T05:36:19.739Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>WebSocket 是 HTMl5 所引入的协议, 使得浏览器具备了实时双向通信的能力. 这里将详细介绍 WebSocket 协议实现. 在网路中已有不少文章介绍此协议, 但是并没有很详细的展开说明, 本文将完整的描述此协议, 并且给出案例数据做详细说明.</p><p>WebSocket 协议总共分为两个部分, 第一部分透过 HTTP 协议, 进行协议升级到 WebSocket, 这一部分本文将不会做叙述 (详细见后续 HTTP 协议相关文章), 第二部分则是 WebSocket 帧数据传输协议, 也就是 WebSocket 协议重要的部分.</p><h2 id="数据帧"><a href="#数据帧" class="headerlink" title="数据帧"></a>数据帧</h2><p>在开始进行详细说明之前, 来看一下经过处理的 (需开启 Javascript) <a href="https://tools.ietf.org/html/rfc6455#section-5.2" target="_blank" rel="noopener">rfc</a> 给出的图示.</p><template>原始档案:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> 0                   1                   2                   3</span><br><span class="line"> 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</span><br><span class="line">+-+-+-+-+-------+-+-------------+-------------------------------+</span><br><span class="line">|F|R|R|R| opcode|M| Payload len |    Extended payload length    |</span><br><span class="line">|I|S|S|S|  (4)  |A|     (7)     |             (16&#x2F;64)           |</span><br><span class="line">|N|V|V|V|       |S|             |   (if payload len&#x3D;&#x3D;126&#x2F;127)   |</span><br><span class="line">| |1|2|3|       |K|             |                               |</span><br><span class="line">+-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +</span><br><span class="line">|     Extended payload length continued, if payload len &#x3D;&#x3D; 127  |</span><br><span class="line">+ - - - - - - - - - - - - - - - +-------------------------------+</span><br><span class="line">|                               |Masking-key, if MASK set to 1  |</span><br><span class="line">+-------------------------------+-------------------------------+</span><br><span class="line">| Masking-key (continued)       |          Payload Data         |</span><br><span class="line">+-------------------------------- - - - - - - - - - - - - - - - +</span><br><span class="line">:                     Payload Data continued ...                :</span><br><span class="line">+ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +</span><br><span class="line">|                     Payload Data continued ...                |</span><br><span class="line">+---------------------------------------------------------------+</span><br></pre></td></tr></table></figure></template><!-- <span class="ws-byte ws-byte0">0 1 2 3 4 5 6 7</span> <span class="ws-byte ws-byte1">8 9 0 1 2 3 4 5</span> <span class="ws-byte ws-byte2">6 7 8 9 0 1 2 3</span> <span class="ws-byte ws-byte3">4 5 6 7 8 9 0 1</span> #00 1 2 3 4 5 6 7#! #2#18#! #39 0 1 2 3 4 5#!! #46 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1#!--><template><pre id="pre_ws_protocol"> 0                   1                   2                   3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1#0+-+-+-+-+-------#!#2#0#1+#!!#1-#!#3#1+#!-------------#!!#4#3+#!-------------------------------+#!#0|F|R|R|R| opcode#!#2#0#1|#!!#1M#!#3#1|#! Payload len #!!#4#3|#!    Extended payload length    |#!#0|I|S|S|S|  (4)  #!#2#0#1|#!!#1A#!#3#1|#!     (7)     #!!#4#3|#!             (16/64)           |#!#0|N|V|V|V|       #!#2#0#1|#!!#1S#!#3#1|#!             #!!#4#3|#!   (if payload len==126/127)   |#!#0| |1|2|3|       #!#2#0#1|#!!#1K#!#3#1|#!             #!!#4#3|#!                               |#!#4#0+-+-+-+-+-------#!#2#0#1+#!!#1-#!#3#1+#!-------------#!!#3+#! - - - - - - - - - - - - - - - +#!#4|     Extended payload length continued, if payload len == 127  |#!#4+ - - - - - - - - - - - - - - - #!#5#4+#!#4-------------------------------+#!!#4|                               #!#5#4|#!Masking-key, if MASK set to 1  |#!#5#4+-------------------------------#6+#!!#6-------------------------------+#!!#5| Masking-key (continued)       #!#5#6|#!!#6          Payload Data         |#!#5+--------------------------------#!#6 - - - - - - - - - - - - - - - +#!#6:                     Payload Data continued ...                :#!#6+ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +#!#6|                     Payload Data continued ...                |#!#6+---------------------------------------------------------------+#!</pre><pre>  #4 extended payload length  #5 masking key  #6 payload data</pre><script>  !(function(window){    'use strict';<pre><code>var pre = document.getElementById(&apos;pre_ws_protocol&apos;);// fill tagfunction fill_tag() {  var art_pic = pre.innerText;  art_pic = art_pic.replace(/#!!/gi, &apos;&lt;/span&gt;&lt;/span&gt;&apos;);  art_pic = art_pic.replace(/#!/gi, &apos;&lt;/span&gt;&apos;);  art_pic = art_pic.replace(/#0/gi, &apos;&lt;span class=&quot;ws-block-0&quot;&gt;&apos;);  art_pic = art_pic.replace(/#1/gi, &apos;&lt;span class=&quot;ws-block-1&quot;&gt;&apos;);  art_pic = art_pic.replace(/#2/gi, &apos;&lt;span class=&quot;ws-block-2&quot;&gt;&apos;);  art_pic = art_pic.replace(/#3/gi, &apos;&lt;span class=&quot;ws-block-3&quot;&gt;&apos;);  art_pic = art_pic.replace(/#4/gi, &apos;&lt;span class=&quot;ws-block-4&quot;&gt;&apos;);  art_pic = art_pic.replace(/#5/gi, &apos;&lt;span class=&quot;ws-block-5&quot;&gt;&apos;);  art_pic = art_pic.replace(/#6/gi, &apos;&lt;span class=&quot;ws-block-6&quot;&gt;&apos;);  console.log(art_pic);  pre.innerHTML = art_pic;}fill_tag();</code></pre><p>  })(window);<br></script><br></template></p><!-- <template> --><pre id="pre_ws_protocol"> 0                   1                   2                   3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1<span class="ws-block-0">+-+-+-+-+-------</span><span class="ws-block-2"><span class="ws-block-0"><span class="ws-block-1">+</span></span><span class="ws-block-1">-</span><span class="ws-block-3"><span class="ws-block-1">+</span>-------------</span></span><span class="ws-block-4"><span class="ws-block-3">+</span>-------------------------------+</span><span class="ws-block-0">|F|R|R|R| opcode</span><span class="ws-block-2"><span class="ws-block-0"><span class="ws-block-1">|</span></span><span class="ws-block-1">M</span><span class="ws-block-3"><span class="ws-block-1">|</span> Payload len </span></span><span class="ws-block-4"><span class="ws-block-3">|</span>    Extended payload length    |</span><span class="ws-block-0">|I|S|S|S|  (4)  </span><span class="ws-block-2"><span class="ws-block-0"><span class="ws-block-1">|</span></span><span class="ws-block-1">A</span><span class="ws-block-3"><span class="ws-block-1">|</span>     (7)     </span></span><span class="ws-block-4"><span class="ws-block-3">|</span>             (16/64)           |</span><span class="ws-block-0">|N|V|V|V|       </span><span class="ws-block-2"><span class="ws-block-0"><span class="ws-block-1">|</span></span><span class="ws-block-1">S</span><span class="ws-block-3"><span class="ws-block-1">|</span>             </span></span><span class="ws-block-4"><span class="ws-block-3">|</span>   (if payload len==126/127)   |</span><span class="ws-block-0">| |1|2|3|       </span><span class="ws-block-2"><span class="ws-block-0"><span class="ws-block-1">|</span></span><span class="ws-block-1">K</span><span class="ws-block-3"><span class="ws-block-1">|</span>             </span></span><span class="ws-block-4"><span class="ws-block-3">|</span>                               |</span><span class="ws-block-4"><span class="ws-block-0">+-+-+-+-+-------</span><span class="ws-block-2"><span class="ws-block-0"><span class="ws-block-1">+</span></span><span class="ws-block-1">-</span><span class="ws-block-3"><span class="ws-block-1">+</span>-------------</span></span><span class="ws-block-3">+</span> - - - - - - - - - - - - - - - +</span><span class="ws-block-4">|     Extended payload length continued, if payload len == 127  |</span><span class="ws-block-4">+ - - - - - - - - - - - - - - - </span><span class="ws-block-5"><span class="ws-block-4">+</span><span class="ws-block-4">-------------------------------+</span></span><span class="ws-block-4">|                               </span><span class="ws-block-5"><span class="ws-block-4">|</span>Masking-key, if MASK set to 1  |</span><span class="ws-block-5"><span class="ws-block-4">+-------------------------------<span class="ws-block-6">+</span></span><span class="ws-block-6">-------------------------------+</span></span><span class="ws-block-5">| Masking-key (continued)       </span><span class="ws-block-5"><span class="ws-block-6">|</span></span><span class="ws-block-6">          Payload Data         |</span><span class="ws-block-5">+--------------------------------</span><span class="ws-block-6"> - - - - - - - - - - - - - - - +</span><span class="ws-block-6">:                     Payload Data continued ...                :</span><span class="ws-block-6">+ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +</span><span class="ws-block-6">|                     Payload Data continued ...                |</span><span class="ws-block-6">+---------------------------------------------------------------+</span></pre><!-- </template> --><style>  /*.ws-block-0:hover, .ws-block-1:hover,   .ws-block-2:hover, .ws-block-3:hover,   .ws-block-4:hover, .ws-block-5:hover,   .ws-block-6:hover {    color: red;  }*/</style><script>!(function(window, $){  'use strict';  function listen(i) {    for (var i=0; i<7; i++) {      (function() {        var blocks = document.getElementsByClassName('ws-block-' + i);        bindE(blocks, 'mouseover', function() {          $.setStyle(blocks, 'color: red')        });        bindE(blocks, 'mouseleave', function() {          $.setStyle(blocks, '')        });      })(i)    }  }  function bindE(doms, type, fn) {    for (var i=0; i<doms.length; i++) {      var dom = doms[i];      $.addListener(dom, type, fn, true);    }  }  listen();})(window, (function(window) {  return {    addListener: function(element, type, fun, useCapture) {      if(document.addEventListener){        /* ie9以上正常使用addEventListener */        element.addEventListener(type, fun, useCapture ? useCapture : false);      }else{        /* ie7、ie8使用attachEvent */        if(!fun.prototype._bindFun){            fun.prototype._bindFun = [];        }        // 判断当前的element是否已经绑定过该事件        var s = true;        for(var i in fun.prototype._bindFun){            if(fun.prototype._bindFun[i].type === type && fun.prototype._bindFun[i].element === element){                s = false;                break;            }        }        // 没有绑定事件        if(s === true){            var f = {                type: type,                element: element,                Function: function(event){                    fun.call(element, event);                }            };            fun.prototype._bindFun.push(f);            element.attachEvent('on' + type, f.Function);        }      }    },    removeListener: function(element, type, fun) {      if(document.addEventListener){        /* ie9以上正常使用removeEventListener */        element.removeEventListener(type, fun);      }else{        /* ie7、ie8使用detachEvent */        for(var i in fun.prototype._bindFun){          if(fun.prototype._bindFun[i].type === type && fun.prototype._bindFun[i].element === element){            element.detachEvent('on' + type, fun.prototype._bindFun[i].Function);            fun.prototype._bindFun.splice(i, 1);            break;          }        }      }    },    setStyle: function(elements, style) {      for (var i=0; i<elements.length; i++) {        var element = elements[i];        element.style = style;      }    }  }})(window));</script><p>接下来, 回顾一条基础知识:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 byte  &#x3D; 8 bit</span><br><span class="line">0x0     &#x3D; 0000 0000</span><br><span class="line">0xff    &#x3D; 1111 1111</span><br></pre></td></tr></table></figure><p>那么, 继续回到这张图;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</span><br></pre></td></tr></table></figure><p>在图的上方所列出来的数字就是一位 (1 bit), 透过处理后的图中可以看出, 一个帧是由四或五个部分的数据所拼凑而成的:</p><ol><li>包含 <a href="#FIN">FIN</a> <a href="#RSV">RSV1</a> <a href="#RSV">RSV2</a> <a href="#RSV">RSV3</a> 以及 <a href="#OPCODE">OPCODE</a></li><li><a href="#MASK">MASK</a> 以及 <a href="#PAYLOAD-LEN">PAYLOAD LEN</a></li><li><a href="#PAYLOAD-LEN">PAYLOAD LEN</a></li><li><a href="#MASKING-KEY">MASKING KEY</a>, Masking key 只有在 <a href="#MASK">MASK</a> 为 1 时才会存在的 4 <ruby><rb>字节</rb><rp>(</rp><rt>bytes</rt><rp>)</rp></ruby>数据</li><li><a href="#PAYLOAD">PAYLOAD</a></li></ol><h3 id="FIN"><a href="#FIN" class="headerlink" title="FIN"></a>FIN</h3><pre> <span style="color: red">0</span> 1 2 3 4 5 6 7 <span style="color: red">+-+</span>-+-+-+-------+<span style="color: red">|F|</span>R|R|R| opcode|<span style="color: red">|I|</span>S|S|S|  (4)  |<span style="color: red">|N|</span>V|V|V|       |<span style="color: red">| |</span>1|2|3|       |<span style="color: red">+-+</span>-+-+-+-------+ <span style="color: green">1</span> # 结束帧 <span style="color: green">0</span> # 连续帧</pre><p>表示该帧是不是消息的最后一帧, 1 表示结束, 0 表示连续帧, 还有下一帧.</p><h3 id="RSV"><a href="#RSV" class="headerlink" title="RSV"></a>RSV</h3><pre> 0 <span style="color: red">1 2 3</span> 4 5 6 7 +-<span style="color: red">+-+-+-+</span>-------+|F<span style="color: red">|R|R|R|</span> opcode||I<span style="color: red">|S|S|S|</span>  (4)  ||N<span style="color: red">|V|V|V|</span>       || <span style="color: red">|1|2|3|</span>       |+-<span style="color: red">+-+-+-+</span>-------+   <span style="color: green">0 0 0</span> # 默认情况</pre><p>WebSocket 预留扩展字段, 共有 3 位 (bit) (RSV1, RSV2, RSV3), 无任何扩展应该都为 0, 若没有定义协议扩展而收到了不为 0 的数据, 那么应该断开 WebSocket 连接.</p><h3 id="OPCODE"><a href="#OPCODE" class="headerlink" title="OPCODE"></a>OPCODE</h3><pre> 0 1 2 3 <span style="color: red">4 5 6 7</span> +-+-+-+-<span style="color: red">+-------+</span>|F|R|R|R<span style="color: red">| opcode|</span>|I|S|S|S<span style="color: red">|  (4)  |</span>|N|V|V|V<span style="color: red">|       |</span>| |1|2|3<span style="color: red">|       |</span>+-+-+-+-<span style="color: red">+-------+</span>         <span style="color: green">0 0 0 0</span> # 连续帧         <span style="color: green">0 0 0 1</span> # 数据帧 文字类型         <span style="color: green">0 0 1 0</span> # 数据帧 二进制类型         <span style="color: green">0 0 1 1</span> | ----------------         <span style="color: green">. . . .</span> | 0x3-0x7 保留数据帧         <span style="color: green">0 1 1 1</span> | ----------------         <span style="color: green">1 0 0 0</span> # 控制帧 <a href="#关闭连接">关闭连接</a>         <span style="color: green">1 0 0 1</span> # 控制帧 <a href="#心跳">ping</a>         <span style="color: green">1 0 1 0</span> # 控制帧 <a href="#心跳">pong</a>         <span style="color: green">1 0 1 1</span> | ----------------         <span style="color: green">. . . .</span> | 0xb-0xf 保留控制帧         <span style="color: green">1 1 1 1</span> | ----------------</pre><p>描述 <code>Payload data</code> 数据定义类型, 4 bit, 一个错误但是很容易理解的方向是, 很类似于 HTTP 协议中的 <code>Content-Type</code> Header 头 (错误的地方在于 <code>OPCODE</code> 标识的不仅仅只有类型, 还可以作为控制帧的标识). 协议定义了以下值:</p><ul><li>0x0<br>表示连续的帧, 连续帧于 <a href="#FIN">FIN</a> 是有关联的;<br>FIN 表示是否结束帧, 1 是结束, 那么如果 FIN 是 0 对应的 OPCODE 也是 0x0, 当 FIN 是 1 表明帧结束, OPCODE 应该对应着结束的值 (0x1, 0x2, 0x3-7)</li></ul><div id="flowchart-0" class="flow-chart"></div><ul><li>0x1<br>表示 text 帧</li><li>0x2<br>表示二进制帧</li><li>0x3-7<br>预留给<ruby><rb>非控制帧</rb><rp>(</rp><rt>数据帧, 非指令类型数据, 用来描述 Payload 数据类型</rt><rp>)</rp></ruby></li><li>0x8<br>表示关闭连接帧</li><li>0x9<br>表示 ping</li><li>0xA<br>表示 pong</li><li>0xB-F<br>预留给<ruby><rb>控制帧</rb><rp>(</rp><rt>指令类型数据, 用来操控 Websocket 状态</rt><rp>)</rp></ruby></li></ul><h3 id="MASK"><a href="#MASK" class="headerlink" title="MASK"></a>MASK</h3><p>表示 Playload data 是否要加掩码, 从客户端发到服务端的帧都要加掩码, 因此客户端构造协议数据此位永远为 1 并且需要赋值 <a href="#MASKING-KEY">Masking key</a>. 而服务端返回的数据不需要掩码, 因此此位永远为 0.</p><pre> <span style="color: red">8</span> 9 0 1 2 3 4 5 <span style="color: red">+-+</span>-------------+<span style="color: red">|M|</span> Payload len |<span style="color: red">|A|</span>     (7)     |<span style="color: red">|S|</span>             |<span style="color: red">|K|</span>             |<span style="color: red">+-+</span>-------------+ <span style="color: green">1</span> # 包含 masking key <span style="color: green">0</span> # 不包含 masking key</pre><h3 id="PAYLOAD-LEN"><a href="#PAYLOAD-LEN" class="headerlink" title="PAYLOAD LEN"></a>PAYLOAD LEN</h3><p>数据长度, 在 WebSocket 协议中, 长度是相对比较复杂的部分. 此处的长度是 Payload data 数据长度, 在 WebSocket 协议中, 长度共分三种情况. 小于 126 (<code>7 bits</code>) 以及 126 (<code>7 + 16 bits</code>) 和 127 (<code>7 + 64 bits</code>). </p><p>首先, 最重要的就是当前 byte 中所遗留下来的 7 位 (bit), 最高可表示 <ruby><rb>127</rb><rp>(</rp><rt>111 1111</rt><rp>)</rp></ruby>, 为了剩下的两种情况, 要保留 2 位, 因此第一种情况最高可表示的长度为 <ruby><rb>125</rb><rp>(</rp><rt>111 1101</rt><rp>)</rp></ruby>, 如果长度超过 125 采用第二种情况. 当数据超过 <code><ruby><rb>0xffff</rb><rp>(</rp><rt>2 bytes, 16 bits</rt><rp>)</rp></ruby></code> 采用第三种情况.</p><pre> 8 <span style="color: red">9 0 1 2 3 4 5</span> +-<span style="color: red">+-------------+</span>|M<span style="color: red">| Payload len |</span>|A<span style="color: red">|     (7)     |</span>|S<span style="color: red">|             |</span>|K<span style="color: red">|             |</span>+-<span style="color: red">+-------------+</span>   <span style="color: green">0 0 0 0 0 0 0</span> # 数据长度 <ruby><rb>0x0</rb><rp>(</rp><rt>0</rt><rp>)</rp></ruby>   <span style="color: green">. . . . . . .</span> #   <span style="color: green">1 1 1 1 1 0 1</span> # 数据长度 <ruby><rb>0x7d</rb><rp>(</rp><rt>125</rt><rp>)</rp></ruby></pre><p>第二种情况, 前 7 位表示为 <code>126</code>, 实际长度采用后面的 <ruby><rb>2 bytes</rb><rp>(</rp><rt>16 bits</rt><rp>)</rp></ruby>. 最高可表示 <code>0xffff</code>, 如果超过这个长度将采用第三种情况.</p><pre> 0 1 2 3 4 5 6 7 8 <span style="color: red">9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</span>+-+-+-+-+-------+-<span style="color: red">+-------------+-------------------------------+</span>|F|R|R|R| opcode|M<span style="color: red">| Payload len |    Extended payload length    |</span>|I|S|S|S|  (4)  |A<span style="color: red">|     (7)     |             (16/64)           |</span>|N|V|V|V|       |S<span style="color: red">|             |   (if payload len==126/127)   |</span>| |1|2|3|       |K<span style="color: red">|             |                               |</span>+-+-+-+-+-------+-<span style="color: red">+-------------+ - - - - - - - - - - - - - - - +</span>                   <span style="color: orange">1 1 1 1 1 1 0</span> <span style="color: green">0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 0</span>                 # |           | |                             |                 #  -----------   -----------------------------                 #   0x7e 126             0x7e 126                 #                   <span style="color: orange">1 1 1 1 1 1 0</span> <span style="color: green">1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1</span>                 # |           | |                             |                 #  -----------   -----------------------------                 #   0x7e 126            0xffff 65535</pre><p>第三种情况, 长度超过 <code>0xffff</code>, 前 7 位表示为 <code>127</code>, 实际长度采用后面的 <ruby><rb>8 bytes</rb><rp>(</rp><rt>64 bits</rt><rp>)</rp></ruby>. 最高可表示 <code>0xffffffffffffffff</code></p><pre> 0 1 2 3 4 5 6 7 8 <span style="color: red">9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</span>+-+-+-+-+-------+-<span style="color: red">+-------------+-------------------------------+</span>|F|R|R|R| opcode|M<span style="color: red">| Payload len |    Extended payload length    |</span>|I|S|S|S|  (4)  |A<span style="color: red">|     (7)     |             (16/64)           |</span>|N|V|V|V|       |S<span style="color: red">|             |   (if payload len==126/127)   |</span>| |1|2|3|       |K<span style="color: red">|             |                               |</span>+-+-+-+-+-------+-<span style="color: red">+-------------+ - - - - - - - - - - - - - - - +</span>                   <span style="color: orange">1 1 1 1 1 1 1</span> <span style="color: green">0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0</span>                 # |           | |                 #  -----------   -----------------------------                 #   0x7f 127                 #                   <span style="color: orange">1 1 1 1 1 1 1</span> <span style="color: green">1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1</span>                 # |           | |                 #  -----------   -----------------------------                 #   0x7f 127 <span style="color: red">0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</span><span style="color: red">+-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +</span><span style="color: red">|     Extended payload length continued, if payload len == 127  |</span><span style="color: red">+ - - - - - - - - - - - - - - - +-------------------------------+</span> <span style="color: green">0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1</span>#---------------------------------------------------------------                     0x10000  65536 <span style="color: green">1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1</span>#---------------------------------------------------------------                    0xffffffffffffffff <span style="color: red">0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5</span> 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1<span style="color: red">+ - - - - - - - - - - - - - - - +</span>-------------------------------+<span style="color: red">|                               |</span>Masking-key, if MASK set to 1  |<span style="color: red">+-------------------------------+</span>-------------------------------+ <span style="color: green">0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0</span>#                               |#------------------------------- <span style="color: green">1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1</span>#                               |#-------------------------------</pre><p>至此, Payload length 计算就结束了, 如果你的数据是超过第三种情况的, 那么应该直接抛出异常. 从各种角度出发都不应该发出这么长的内容, 应该视具体情况, 采用连续帧来分段发布一个较长的内容.</p><h3 id="MASKING-KEY"><a href="#MASKING-KEY" class="headerlink" title="MASKING KEY"></a>MASKING KEY</h3><p>如果 <a href="#MASK">MASK</a> 是 1, 需要设置 Masking key, Masking key 长度是 4 个字节, 生成 4 个字节的随机值, 接着用这 4 个字节的随机值对 Payload data 进行<ruby><rb>异或运算</rb><rp>(</rp><rt>^=</rt><rp>)</rp></ruby>. 反之服务端使用相反的运算根据 Masking key 的值对数据进行还原.</p><pre> 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 <span style="color: red">6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</span>+ - - - - - - - - - - - - - - - <span style="color: red">+-------------------------------+</span>|                               <span style="color: red">|Masking-key, if MASK set to 1  |</span>+-------------------------------<span style="color: red">+-------------------------------+</span>                                 <span style="color: green">1 0 1 1 1 1 0 1 1 0 0 1 0 0 1 1</span> <span style="color: red">0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5</span> 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1<span style="color: red">+-------------------------------+</span>-------------------------------+<span style="color: red">| Masking-key (continued)       |</span>          Payload Data         |<span style="color: red">+--------------------------------</span> - - - - - - - - - - - - - - - + <span style="color: green">1 0 1 1 1 1 0 1 1 0 0 1 0 0 1 1</span></pre><h3 id="PAYLOAD"><a href="#PAYLOAD" class="headerlink" title="PAYLOAD"></a>PAYLOAD</h3><p>Payload data 如果不需要进行掩码直接将数据拼入到最后即可. 如果需要, 可以先对数据进行掩码, 然后拼入到帧.</p><h4 id="数据掩码算法"><a href="#数据掩码算法" class="headerlink" title="数据掩码算法"></a>数据掩码算法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data; <span class="comment">// Payload data</span></span><br><span class="line"><span class="keyword">let</span> masking_key; <span class="comment">// 随机 4 字节</span></span><br><span class="line"><span class="keyword">let</span> len = data.length;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">  <span class="keyword">let</span> j = i % <span class="number">4</span>; <span class="comment">// 取模, 得到在 masking_key 中的索引</span></span><br><span class="line">  data[i] ^= masking_key[j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制帧"><a href="#控制帧" class="headerlink" title="控制帧"></a>控制帧</h2><h3 id="心跳"><a href="#心跳" class="headerlink" title="心跳"></a>心跳</h3><p>心跳的机制主要是为了保证 WebSocket 的服务端和客户端的实时双向连接不被断开. 每次心跳都是一个控制帧, 发送方 <a href="#OPCODE">OPCODE</a> 使用 <code>ping</code> 接收方响应 <code>pong</code> 控制帧.</p><h3 id="关闭连接"><a href="#关闭连接" class="headerlink" title="关闭连接"></a>关闭连接</h3><p>关闭连接分两种: 服务端发起 和 客户端主动关闭. 两种方式处理方式相同, 例如当服务端发起关闭, 会发送一个关闭帧(OPCODE 为 <code>0x8</code>), 客户端在收到帧的时候, 会响应一个关闭帧给服务端.</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>当然这并不是 WebSocket 的全貌, 但这里是协议里面最重要的部分, 剩下的都是对协议的完善, 更完善的协议内容参考 <a href="https://tools.ietf.org/html/rfc6455" target="_blank" rel="noopener">rfc</a></p><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: FINcond=>condition: 1 (yes) or 0 (no)opcode_countinue=>operation: opcode: 0x0opcode_other=>operation: opcode: 0x1 or 0x2 or 0x3-7st->condcond(no, right)->opcode_countinuecond(yes)->opcode_other</textarea><textarea id="flowchart-0-options" style="display: none">{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="protocol" scheme="https://blog.3u3.me/tags/protocol/"/>
    
      <category term="websocket" scheme="https://blog.3u3.me/tags/websocket/"/>
    
  </entry>
  
  <entry>
    <title>赤紙</title>
    <link href="https://blog.3u3.me/post/akagami/"/>
    <id>https://blog.3u3.me/post/akagami/</id>
    <published>2018-03-20T23:43:27.000Z</published>
    <updated>2021-01-13T05:36:19.729Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>作曲 : 黒木渚<br>作词 : 黒木渚</p></blockquote><p>うちに赤紙が届いて<br>「喜べ」と言った父上</p><p>白い骨だけ帰って来た<br>娯楽も知らぬまま死んだ<br>貴方が「下らぬ」と言った<br>場末の歌劇団に入り<br>私は今や舞踊界のナンバーワン</p><p>袴から覗く上品な脚も<br>竹のよに真っ直ぐな背も<br>どれも貴方から受け継いだX染色体</p><p>被害者ヅラして生きてくなど<br>到底できない性分で<br>今日も舞うのです<br>喝采の中 狂ったように</p><p>向かいの公爵夫人の<br>旦那様も戦死なさって<br>ヒステリックな大正琴の音<br>止むこともなく聴こえて来ます<br>青い目をした軍人が<br>何気なくくれたキャラメルは<br>罪なほど甘い宿敵の味</p><p>可愛げの無い切れ長の目も<br>病的なほど強い野心も<br>どれも貴方から受け継いだX染色体</p><p>被害者ヅラして生きてくなど<br>到底できない性分で<br>今日も泣くのです<br>ライトの影 悟られぬように</p><p>この想い叫べば<br>「非国民」後ろ指刺され<br>兄上は石つぶて受け<br>母上も悪く言われましょう</p><p>袴から覗く上品な脚も<br>竹のよに真っ直ぐな背も<br>どれも貴方から受け継いだX染色体</p><p>被害者ヅラして生きてくなど<br>到底できない性分で<br>今日も舞うのです<br>喝采の中 狂ったように</p><p>袴から覗く上品な脚も<br>竹のよに真っ直ぐな背も<br>どれも貴方から受け継いだX染色体</p><p>被害者ヅラして生きてくなど<br>到底できない性分で<br>今日も舞うのです<br>喝采の中 狂ったように</p><p>おわり</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="lirc" scheme="https://blog.3u3.me/tags/lirc/"/>
    
  </entry>
  
  <entry>
    <title>July</title>
    <link href="https://blog.3u3.me/post/july/"/>
    <id>https://blog.3u3.me/post/july/</id>
    <published>2017-07-18T01:35:05.000Z</published>
    <updated>2021-01-13T05:36:19.729Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>有些时间没来发牢骚.</p><p>莫名其妙.</p><p>就现在来看, 一切都不是按照预定的走向发展.</p><p>长时间在外, 最初定的计划, 算是完成的就只有是旧博新开吧; 这一次, 真的可以说是没时间, 不过这个没时间, 并不是真正意义上的忙, 老实说全在瞎忙活, 说是要找一个靠谱的团队, 真的靠谱了吗. 仍然是毫无规划的在做事情.</p><p>又到极限.</p><p>有了更多的爱好, 或者说, 对目前的各种不满. </p><p>车厢不是闷热的, 窗外也称不上风景, 没有太多感触, 你不在底站等我.</p><p>完成今年的书单吧. 算上上次意外的那本, 到现在已经有三本, 这次又购置两本.</p><p><img src="https://raw.githubusercontent.com/iaceob/gallery/master/moan/moan-book-the-underground-railroadss.jpg" alt="The UNDERGROUND RAILROAD"></p><p>还有就是银河便车指南第二本. </p><p>让阅读成为习惯吧.</p><p>对了, 前段时间, 和尚推荐的数读还是很不错的. 虽然早就知道有数读, 从未玩过. 当学会怎么去玩之后, 还是很有意思的.</p><p><img src="https://raw.githubusercontent.com/iaceob/gallery/master/moan/moan-july-sudo-1.png" alt="SUDO 1"></p><p><img src="https://raw.githubusercontent.com/iaceob/gallery/master/moan/moan-july-sudo-2.png" alt="SUDO 2"></p><p>蛤, 最简单的关卡.</p><p>Hnn, 雨都不会停, 又在开始.</p><p>不用常常联络, 波长对的才会走在一起.</p><p>总之, 七月来了, 七月又要去了. 短暂.</p><p>接下来</p><p>是怎样</p><p>晚安.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="moan" scheme="https://blog.3u3.me/tags/moan/"/>
    
  </entry>
  
  <entry>
    <title>奔波的人 留不住的城</title>
    <link href="https://blog.3u3.me/post/which-city/"/>
    <id>https://blog.3u3.me/post/which-city/</id>
    <published>2017-05-30T00:54:34.000Z</published>
    <updated>2021-01-13T05:36:19.739Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>车厢里有点闷热 不坐到底站的人来来走走 跟窗外的风景一样 慢慢流逝旧的又被填充上新的 邻座不知要走向哪里的年轻母亲轻轻的哄着怀里的婴孩 声音细软 跟现在窗外的阳光一样温柔 一切都不是特别深刻 但有值得怀念 你在底站等我</p><p>超喜欢走在寂静的夜晚, 一首爱上已久的音乐, 一个人, 一直走着.</p><p>等我死了以后, 请吧我的骨灰带在身边, 遇到坏人就扬出去. 让我最后, 再保护你一次.</p><p>雖然很不甘心, 但是如果只做正確的事情, 是無法迎來最圓滿的結局的. 大家越是相信自己的做法正確, 就會變得越股指, 讓幸福離自己越來越遠.</p><p>等生活中真的有了生老病死這樣的大事, 你才知道以前的憂傷都是狗屁.</p><p>沒有哪段感情是真正完美無缺的, 所以要找一個和你脾氣相投的人, 因爲這樣就足夠完美了.</p><p>你 真的有認真聽一首歌嗎?</p><p>聽着, 寶貝, 這個星球除了我和其他人就沒有更多的人了, 快, 進去吧.</p><p>“「不是回不去了， 而是都過去了」和那個階段的你說再見. 不會忘了你, 你曾是我生命里重要的一部分, 只是, 都結束了, 我們該好好道別.”</p><p>我們都是在爲了什麼</p><p>我啊, 已经不能哭了. 所以你来替我哭吧, Horizon.</p><p>改變一生只需要那麼一點點時間, 領悟那改變卻要耗費一生.</p><p>是很忙, 但是并不充实.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="moan" scheme="https://blog.3u3.me/tags/moan/"/>
    
  </entry>
  
  <entry>
    <title>意外</title>
    <link href="https://blog.3u3.me/post/moan-part-7/"/>
    <id>https://blog.3u3.me/post/moan-part-7/</id>
    <published>2017-05-04T22:19:50.000Z</published>
    <updated>2021-01-13T05:36:19.729Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>应该说, 到现在, 所发生的一切都是一连串的意外所产生的.</p><p>现在还不想回忆这些意外, 真的, 太多了, 以至于我无法说清; 而且也还没到该回忆的时候 (年长六年那个就不知道了_(:3 」∠ )_ ); 鬼知道还会有多少意外.</p><p>前些天, 就很意外的买了本书, 就在今天, 就已经全部看完了. </p><p><a href="https://book.douban.com/subject/26242908/" target="_blank" rel="noopener">如果世上不再有猫</a></p><p>很惭愧, 我无法写出独到的见解; 每个人都有自己的见解和感受, 如果你想了解, 你就应该自己去做.</p><p>当然, 意外也包括来自生活中的惊喜, 很喜欢在你毫无预兆的情况下有一个未知的惊喜在等着你, 那么先让自己成为那个发出惊喜的人吧 ~</p><p>还有, 不知道会不会再一次意外的回到最初的地方.</p><p>又停下来了.</p><p>说不上的感觉.</p><p>就这样.</p><div id="aplayer-GoDAAQEs" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;"><pre class="aplayer-lrc-content">[00:19.71]君に見せたいものがあるんだ[00:25.40]孤独な夜にもきっと[00:29.32]遠くで輝き続ける[00:35.67]幾千の星を[00:40.42]失うこと[00:42.73]割り切れぬこと　[00:45.22]弾かれること　[00:47.74]叶わないこと　[00:50.32]でも足掻くこと　[00:52.87]信じぬくこと[00:55.44]上を向いて[00:57.99]歩き出すこと[01:03.21]僕らの手には何もないけど[01:08.08]かわりに　つなぎあえるから[01:13.73]ひとりきりで　迷わないで[01:18.73]どんな日もこの手を離さないから　[01:33.80]君にあげたいものがあるんだ[01:39.35]凍える夜にはいつも　[01:43.39]もう何も心配等せず[01:49.75]眠れる毛布を[01:54.20]忘れられぬこと[01:56.60]耐えきれぬこと[01:59.31]術がないこと　[02:01.76]奪われること[02:04.33]でも気付くこと　[02:06.70]君がいること[02:09.39]守りたいものが[02:11.91]強くさせること[02:17.27]自分の色を誇れるように[02:22.08]自由に色を足せばいい[02:27.25]ぼやけていた　この世界を[02:32.83]この手が彩ってゆくんだ[02:39.04]認めてくれる人がいなくても　[02:43.37]サマになる肩書きがなくても　[02:48.34]僕らの小さな手は明日きっと[02:53.51]誰かを笑顔にできるから[03:00.83]僕らの手には何もないけど[03:05.64]かわりに　つなぎあえるから[03:10.90]ひとりきりで　迷わないで[03:16.26]どんな日もこの手を離さないから[03:41.75]君に見せたいものがあるんだ[03:47.36]孤独な夜にもきっと[03:51.38]遠くで輝き続ける[03:57.82]幾千の星を</pre></div><script>var ap = new APlayer({element: document.getElementById("aplayer-GoDAAQEs"),narrow: false,autoplay: false,showlrc: 2,music: {title: "僕らの手には何もないけど、",author: "RAM WIRE",url: "https://mio.0u0.me/music/RAM%20WIRE%20-%20%E5%83%95%E3%82%89%E3%81%AE%E6%89%8B%E3%81%AB%E3%81%AF%E4%BD%95%E3%82%82%E3%81%AA%E3%81%84%E3%81%91%E3%81%A9%E3%80%81.mp3",pic: "https://p1.music.126.net/V1o9XDhAnI1ayWW5elJwFQ==/109951163338252165.jpg?param=500y500",}});window.aplayers || (window.aplayers = []);window.aplayers.push(ap);</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="moan" scheme="https://blog.3u3.me/tags/moan/"/>
    
  </entry>
  
  <entry>
    <title>世界から貓が消えたなら</title>
    <link href="https://blog.3u3.me/post/if-this-world-cat-disappears/"/>
    <id>https://blog.3u3.me/post/if-this-world-cat-disappears/</id>
    <published>2017-05-04T21:58:57.000Z</published>
    <updated>2021-01-13T05:36:19.729Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>“人类和猫共同生活了一万年, 所以, 长时间和猫想处, 就会渐渐了解, 不是人类饲养猫, 只是猫愿意陪伴在人类身旁而已.”</p><hr><p>“你一直都戴那只表, 有什么特别意义吗?”<br>“那是你爸第一次送我的礼物.”<br>“原来是这样.”<br>“那是你爸用他搜集的古董表的零件组装的手表.”<br>“原来他会做这种事.”<br>“他会做这种事.”<br>老妈说完, 像少女般笑了起来.<br>“你爸上个星期来看我时, 我说手表不动了, 他没有吭气, 就带回家了. 原来他打算拿回去修理.”<br>“但没必要偏偏现在修理啊.”<br>“没关系. 你在这里陪我, 我当然高兴, 但有时候人会用不同的方式表达内心的爱.”<br>“是这样吗?”<br>“就是这样啊.”</p><hr><p>“没错. 我猜想由你内心我数个小小的后悔, 想要这么做, 用另一种方式活到今天, 就会形成我现在这个样子. 这事某种理想, 又同时带有魔鬼的性质, 虽然想要成为那样的自己, 却又无法真的做到, 是离自己最近的遥远存在. 差不多就是这样吧.”<br>“我做的决定对吗?”<br>“请不要问我.”<br>“临终的时候会后悔吗?”<br>“一定会. 我还想活下去! 想要把魔鬼找回来! 你应该会有这种想法. 人类总是从自己选择的人生看向自己没有选择的另一种人生, 感到羡慕, 感到后悔.”</p><hr><p>但是, 当我获得可以让某些东西从这个世界消失的权利后, 发现这种后悔正是一种美, 因为这正是我活过的证明.<br>我不会再让任何东西从这个世界消失.<br>也许我会在临死之际后悔, 为了活命, 可以让猫或是任何东西消失. 但是, 及时如此也无妨, 反正我的人生本就充满后悔.<br>原以为此生活出了自我, 但其实并没有活出自我.<br>我的人生, 终究没有找到自我.<br>无数的失败和后悔, 没有完成的梦想, 相见的人, 想吃的食物, 和想去的地方. 我将带着这些无数的东西走向死亡, 但是, 这也无妨, 我觉得现在的自己很好. 我很庆幸自己走到了这里, 而不是走到不是这里的另一个地方.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="book" scheme="https://blog.3u3.me/tags/book/"/>
    
  </entry>
  
  <entry>
    <title>10 年後この木の下で</title>
    <link href="https://blog.3u3.me/post/moan-part-6/"/>
    <id>https://blog.3u3.me/post/moan-part-6/</id>
    <published>2017-04-02T17:27:33.000Z</published>
    <updated>2021-01-13T05:36:19.729Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>不出意外的又踩到屎.</p><p>是說現在的企業, 公司只會提出很前衛的理念和想法, 但是去實作的人全是渣?</p><p>不談, 不想談, 越是追究, 到最後變成了自己看什麼都不爽, 看什麼都不舒服.</p><p>還是頭一次公休假期沒有回家了.</p><p>發現自己的 <code>阿Q精神</code> 最近越來越爆棚, 恩, 總感覺這一切都將慢慢的好起來, 變的越來越不悲觀. 其實所有的問題又一次如以前一樣被深深地埋了起來, 又一次選擇了逃避.</p><p>再一次燃起熱血準備做一件事, 對, 就是在今天, 不出意外的忽然間又產生了 <strong>我特麼還要不要做下去</strong> 的念頭.</p><p>// 不想放棄, 已經為了這個拋棄了好多了, 怎麼能就這樣放棄.</p><p>喜歡的事物很多, 慢慢的, 多了好興趣, 對閱讀書本漸漸多了很多耐心, 不會顯得煩躁, 拿起筆的次數變多, 願意拿更多的時間放在更加真實的現在.</p><p>可惜, 說要學習日語到現在都還沒什麼進展, 當然和這次又踩到屎有關.</p><p>接下來,</p><p>準備入手 Chromebook , 看好久了. 還是很心動.</p><p>等待夏末的到來~</p><p>還有昂.</p><p>做下去, 繼續做下去, 我到要看看自己到底能維持做一件事能有多久.</p><p>歌單該換啦, 老實說, 人真的會在潛移默化中改變, 歌單最早的歌曲已經有 3 Year+ 現在每次打開歌單做的第一件事請就是 滑 滑 滑, 直到最近新加的曲子.</p><blockquote><p>種一顆樹最好的時間是十年前, 其次是現在.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="moan" scheme="https://blog.3u3.me/tags/moan/"/>
    
  </entry>
  
  <entry>
    <title>我尽力了!</title>
    <link href="https://blog.3u3.me/post/moan-part-5/"/>
    <id>https://blog.3u3.me/post/moan-part-5/</id>
    <published>2017-03-19T21:59:30.000Z</published>
    <updated>2021-01-13T05:36:19.729Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://raw.githubusercontent.com/iaceob/gallery/master/moan/moan-clean-before-1.jpg" alt="Before"></p><p><img src="https://github.com/iaceob/gallery/blob/master/moan/moan-clean-after-1.jpg?raw=true" alt="After"></p><p>手疼.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="moan" scheme="https://blog.3u3.me/tags/moan/"/>
    
  </entry>
  
  <entry>
    <title>JFinal RESTful</title>
    <link href="https://blog.3u3.me/post/jfinal-restful/"/>
    <id>https://blog.3u3.me/post/jfinal-restful/</id>
    <published>2017-03-18T16:10:28.000Z</published>
    <updated>2021-01-13T05:36:19.729Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在阅读之前, 先参考</p><ol><li><a href="http://www.jfinal.com/project/1" target="_blank" rel="noopener">JFinal 极速开发框架</a></li><li><a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="noopener">RESTful API 设计指南</a></li><li><a href="https://www.oschina.net/question/552061_249032" target="_blank" rel="noopener">JFinal实现严格的Restful</a></li></ol><p>当看完这些之后, 大概应该就能理解, RESTful 的规范, 以及 JFinal 的路由实现方式.</p><p>首先, 先看下 JFinal 目前的 RESTful 风格路由实现.</p><p>翻开 <code>com.jfinal.core.ActionMapping#getAction</code> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Support four types of url</span></span><br><span class="line"><span class="comment"> * 1: http://abc.com/controllerKey                 ---&gt; 00</span></span><br><span class="line"><span class="comment"> * 2: http://abc.com/controllerKey/para            ---&gt; 01</span></span><br><span class="line"><span class="comment"> * 3: http://abc.com/controllerKey/method          ---&gt; 10</span></span><br><span class="line"><span class="comment"> * 4: http://abc.com/controllerKey/method/para     ---&gt; 11</span></span><br><span class="line"><span class="comment"> * The controllerKey can also contains "/"</span></span><br><span class="line"><span class="comment"> * Example: http://abc.com/uvw/xyz/method/para</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Action <span class="title">getAction</span><span class="params">(String url, String[] urlPara)</span> </span>&#123;</span><br><span class="line">  Action action = mapping.get(url);</span><br><span class="line">  <span class="keyword">if</span> (action != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> action;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// --------</span></span><br><span class="line">  <span class="keyword">int</span> i = url.lastIndexOf(SLASH);</span><br><span class="line">  <span class="keyword">if</span> (i != -<span class="number">1</span>) &#123;</span><br><span class="line">    action = mapping.get(url.substring(<span class="number">0</span>, i));</span><br><span class="line">    urlPara[<span class="number">0</span>] = url.substring(i + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> action;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有说明, 目前 JFinal 支持的路由格式, 在此之外, JFinal 还提供了一个 <code>Restful</code> 的拦截器, 来达到严格的 RESTful url 风格实现.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Invocation 中添加 Method method</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment">  The standard definition is as follows:</span></span><br><span class="line"><span class="comment">  index - GET - A view of all (or a selection of) the records</span></span><br><span class="line"><span class="comment">  show - GET - A view of a single record</span></span><br><span class="line"><span class="comment">  add - GET - A form to post to create</span></span><br><span class="line"><span class="comment">  save - POST - Create a new record</span></span><br><span class="line"><span class="comment">  edit - GET - A form to edit a single record</span></span><br><span class="line"><span class="comment">  update - PUT - Update a record</span></span><br><span class="line"><span class="comment">  delete - DELETE - Delete a record</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * GET    /user      ---&gt;  index</span></span><br><span class="line"><span class="comment"> * GET    /user/id    ---&gt;  show  </span></span><br><span class="line"><span class="comment"> * GET    /user/add    ---&gt;  add</span></span><br><span class="line"><span class="comment"> * POST    /user      ---&gt;  save</span></span><br><span class="line"><span class="comment"> * GET    /user/edit/id  ---&gt;  edit</span></span><br><span class="line"><span class="comment"> * PUT    /user/id    ---&gt;  update</span></span><br><span class="line"><span class="comment"> * DELETE  /user/id    ---&gt;  delete</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Restful</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当看完这些之后, 进入到正题.</p><p>首先, JFinal 基本上已经可以很好的实现 RESTful 风格的 url 了, 但是仍然有不足, 无论是默认的路由实现, 或者是 Restful 拦截器的实现, 仍然无法做到全可控的 RESTful 实现.<br>Restful 拦截器的实现实际上是匹配链接以及 Request method, 然后进行 forward 到相应的 action 中.</p><p>例如, 参考链接 <a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="noopener">RESTful API 设计指南</a> 文章中的</p><blockquote><p>DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物</p></blockquote><p>就没办法通过 Restful 拦截器来实现了.</p><p>那么, 所有问题都抛出来了.</p><p>因此, 这里要说的就是, 把 JFinal 的路由机制给改了下, 达到完美兼容 RESTful 链接, 并且保留 JFinal 的默认实现.</p><p>具体实现代码已提交至 <a href="https://github.com/iaceob/jfinal/tree/restful" target="_blank" rel="noopener">iaceob/jfinal</a></p><p>先不讨论怎么实现, 其实原理也很简单, 看看代码很容易理解. 这里主要说说使用方式, 以及一些问题.</p><p>使用的时候非常简单, 首先在你的 AppConfig.configConstant 中, 设置开启 RESTful 模式.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configConstant</span><span class="params">(Constants constants)</span> </span>&#123;</span><br><span class="line">    constants.setRestful(<span class="keyword">true</span>);</span><br><span class="line">    constants.setXxx();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当设置了 <code>constants.setRestful(true);</code> 之后, 路由解析就是 RESTful 风格实现的, 默认是 false, 也就是目前 JFinal 自身的路由实现.</p><p>接下来就是定义你的 RESTful 链接格式就好, 下面是一个测试案例.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jfinal.test.restful.test.ctl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.jfinal.core.ActionKey;</span><br><span class="line"><span class="keyword">import</span> com.jfinal.core.Controller;</span><br><span class="line"><span class="keyword">import</span> com.jfinal.plugin.activerecord.Record;</span><br><span class="line"><span class="keyword">import</span> com.jfinal.restful.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by iaceob on 2017/3/17.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZooCtl</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;Record&gt; <span class="title">getAttrs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Record&gt; rets = <span class="keyword">new</span> ArrayList&lt;Record&gt;();</span><br><span class="line">        Enumeration&lt;String&gt; ens = <span class="keyword">super</span>.getAttrNames();</span><br><span class="line">        <span class="keyword">while</span> (ens.hasMoreElements()) &#123;</span><br><span class="line">            String key = ens.nextElement();</span><br><span class="line">            rets.add(<span class="keyword">new</span> Record().set(key, <span class="keyword">super</span>.getAttr(key)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rets;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Record <span class="title">buildRet</span><span class="params">(String intro)</span> </span>&#123;</span><br><span class="line">        Record ret = <span class="keyword">new</span> Record();</span><br><span class="line">        ret.set(<span class="string">"intro"</span>, intro)</span><br><span class="line">                .set(<span class="string">"attrs"</span>, <span class="keyword">this</span>.getAttrs())</span><br><span class="line">                .set(<span class="string">"paras"</span>, <span class="keyword">super</span>.getParaMap());</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ActionKey</span>(<span class="string">"/zoo"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.renderJson(<span class="keyword">this</span>.buildRet(<span class="string">"zoo list"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ActionKey</span>(value = <span class="string">"/zoo"</span>, method = Method.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addZoo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.renderJson(<span class="keyword">this</span>.buildRet(<span class="string">"add zoo"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ActionKey</span>(<span class="string">"/zoo/:id"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getZoo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.renderJson(<span class="keyword">this</span>.buildRet(<span class="string">"get zoo by id"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ActionKey</span>(value = <span class="string">"/zoo/:id"</span>, method = Method.PUT)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putZoo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.renderJson(<span class="keyword">this</span>.buildRet(<span class="string">"put zoo by id"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ActionKey</span>(value = <span class="string">"/zoo/:id"</span>, method = Method.PATCH)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">patchZoo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.renderJson(<span class="keyword">this</span>.buildRet(<span class="string">"patch zoo by id"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ActionKey</span>(value = <span class="string">"/zoo/:id"</span>, method = Method.DELETE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteZoo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.renderJson(<span class="keyword">this</span>.buildRet(<span class="string">"delete zoo by id"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ActionKey</span>(<span class="string">"/zoo/:id/animals"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">animals</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.renderJson(<span class="keyword">this</span>.buildRet(<span class="string">"show zoo animals"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ActionKey</span>(<span class="string">"/zoo/:zooId/animal/:animalId"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getAnimal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.renderJson(<span class="keyword">this</span>.buildRet(<span class="string">"show zoo animal by id"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ActionKey</span>(<span class="string">"/zoo/:zid/animal2/:aid"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getAnimal2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.renderJson(<span class="keyword">this</span>.buildRet(<span class="string">"show zoo animal by id, 2"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用时也是使用 <code>@ActionKey</code> 注解, url 中的值通过 <code>:name</code> 来标识, ActionKey 注解中的另外一个参数就是绑定相应的请求 method.</p><p>获取参数也未作改变, 表单传递的参数仍然通过 <code>getPara()</code> 来获取, 使用方式详细见 JFinal 文档.</p><p>但是需要注意的是:</p><ol><li><p>开启 RESTful 模式后, <code>getPara()</code> 方法按索引取值的方法将失去效果<br>例如, <code>/zoo/:id/1-3</code> 若这样的请求则会直接返回 404 错误, 因为 RESTful 模式采用的匹配规则较严格(可查看代码实现, 或对该处进行修改令其支持), 另外若是采用 RESTful 风格链接, 应该也不会使用此方式传参.</p></li><li><p>存放在 url 中的参数标识无法通过 <code>getPara()</code> 取值.<br>若要获取 url 中指定的参数值, 需要通过 <code>getAttr()</code> 获取, 例如 <code>/zoo/:id</code> 获取这个 id 时, 使用 <code>getAttr(&quot;id&quot;)</code>.</p></li><li><p>RESTful 模式与非 RESTful 的 ActionKey 是不可共用的.<br>这个描述可能比较模糊, 但是要表达的意思是, 如果 ActionKey 中的 url 是采用 RESTful 风格写的, 但是却没有开启 RESTful 模式, 就会发生问题, 非 RESTful 模式是不去分析 url 中参数的.</p></li><li><p>无需再使用 POST GET 拦截器<br>JFinal 提供了 GET POST 拦截器, 用以指定某个路由只能某中请求, 但是开启 RESTful 模式后, 在路由匹配是就已经限定了指定的 method 访问, 因此无需再使用 <code>@Before(POST.class)</code> 这样的代码.</p></li></ol><p>使用方式大抵如此, 剩下还有一些可能会令人不爽的小问题.</p><ol><li><p>使用 <code>getAttr()</code> 获取 url 中参数时, 获取到的值都是 String 类型.<br>因 <code>HttpServletRequest</code> 自身的设计, 在解析完 url 后无法将值写入到 <code>parameter</code> 中, 因此无法使用 JFinal 提供的 <code>getPara()</code> 取值. 后续也考虑过做一个类型自动识别, 但是最终抛弃了, 在不同的系统中, 参数的类型都不同, 自动识别是不靠谱的, 因此建议使用中, 在获取这个参数时都写一个 <code>validator</code> 对这个值进行验证, <code>controller</code> 中就可以对该值进行强转类型.</p></li><li><p>性能问题<br>也不要想得太过与悲观, 这里说的性能只是相对于 JFinal 自身的路由实现. JFinal 的路由实现非常简单, 甚至可以就简单的看成是字符串匹配, 但是这里的 RESTful 模式, 匹配时使用了正则, 因此效能肯定会比 JFinal 自身实现要来的低一些. 后续会做相关方面性能测试.</p></li><li><p>非插拔式<br>意思是, 并非提供扩展, 而是通过修改内核实现, 其原因其实看看 JFinal 提供 <code>Restful</code> 拦截器就知道了 = =, 以及 JFinal 的极简的设计缘故. 首先, JFinal 的路由实现, 路由最初加载进来时, 就通过 ActionMapping 隐射到具体的 Action 中, 随后只要有请求就通过 ActionHandler 找到具体的 Action, 因此想要在此基础上实现 RESTful 几乎是不可能, Restful 拦截器的实现也只能通过 forward 来实现, 且无法在 url 中指定参数. 也就是说, 无论你是加自己的过滤器, 甚至创建一个新的注解, 在请求进来时最先经过的 ActionHandler 就以及拒绝了请求, 无法进入到新定义的路由处理中. 因此要实现就只能从 ActionMapping 中入手, 修改路由实现方式.</p></li></ol><p>基本就这样.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="jfinal" scheme="https://blog.3u3.me/tags/jfinal/"/>
    
      <category term="restful" scheme="https://blog.3u3.me/tags/restful/"/>
    
  </entry>
  
  <entry>
    <title>不间断呻吟</title>
    <link href="https://blog.3u3.me/post/moan-part-4/"/>
    <id>https://blog.3u3.me/post/moan-part-4/</id>
    <published>2017-03-03T22:23:18.000Z</published>
    <updated>2021-01-13T05:36:19.729Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>首先, 不要太相信文章的时间, 今天是 2017.03.03, 前一篇早在上个月就已经建好了, 可是一直没有写. 也就是该文创建的前一天, 读完了《甲骨文》, 就我看过之后的感觉还不错, 扒出很多被遗忘的事情, 就是前不久火的《返校》里说的一样, 「是真的忘记了, 还是不愿意想起来」.</p><p>该书是何伟著的关于中国三部曲之一, 还有一本《寻路中国》, 已经不打算看了, 就已经拜读的两本书来看, 大致能够明白作者想要表达的事情以及观点, 就事实而言, 现今能有很详细描述近代这些事情的人是很了不起的, 至少如果在我们真的忘记了之后还能有人告诉我们有这些事情发生过.</p><p>谈谈最近的事情吧.</p><p>算是摆脱了毫无规划的工作上, 但是才刚摆脱又感觉像是踩到了屎堆里. 至少在我来这里之前从未想到会是现在的这种情况, 同期一起的另外一人很萧然的第二天就离去了, 他看出来了这些问题, 在这里对自己的提升是非常有限的, 奈何, 我却无法做出这样的决定, 最大的问题其实还是来自自己, 并没有在早期很好的武装自己, 这也是无奈的选择, 期盼至少不坑.</p><p>暂时还没有置办网络, 导致的后果是看书的频率以及耐心远远高出以往.</p><p>仍然与以前的自己一样, 无法或者说不能在其他人面前表述自己, 仍然想要营造自己的舒适圈, 弄巧成拙.</p><p>一些事情只想自己闷在心里, 细细品味一番, 还真是了不得了, 都已经坚持这么久了.</p><p>孤单的最后结果就是 忘记 不想 和其他人接触.</p><p>无法对其他人敞开心扉.</p><p>永远不能展示最真实的自己.</p><p>好吧. 就这样吧, 还能怎么样了? 连自己都无法战胜的人, 如何去战胜其他人. 到底还是要抛弃自己?</p><p>记得曾经我说过, 「没有想与不想, 只有愿意与不愿意.」</p><blockquote><p>「我个人相信他可以撑到世界末日.」 福特说.<br>「是喔.」 亚瑟说. 「那是多久?」<br>「大概十二分钟以后.」福特说. 「来吧, 我得喝一杯.」</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="moan" scheme="https://blog.3u3.me/tags/moan/"/>
    
  </entry>
  
  <entry>
    <title>被利用的文字</title>
    <link href="https://blog.3u3.me/post/used-word/"/>
    <id>https://blog.3u3.me/post/used-word/</id>
    <published>2017-02-21T12:30:02.000Z</published>
    <updated>2021-01-13T05:36:19.739Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>中文书写系统经历过无数次的改变, 从最初的象形文字, 到甲骨文, 再到现今的文字书写系统, 以经历了上千年; 包括现今地球上现存的种种文字书写系统也都与中文书写相同类似, 经历了很多的变革, 才形成现今的文字.</p><p>但是, 无论是中文的象形文字系统, 或者是罗马字的表意系统文字, 出现的目的都只是被利用而已, 虽然各个时期被利用的目的都不尽相同.</p><p>从可考的历史来看, 最初的文字几乎都是象形文字, 使用与原物类似的符号标记为某一件事物, 包括锲型文字以及甲骨文. 当然, 现今已经无法考证文字具体是如何诞生的, 若是从象形文字的初衷来说, 文字应该就只是被利用来记录某些事物而已.</p><p>与中文系统不同的是, 锲型文字作为最早出现的象形文字系统, 在后续的发展中并未能像中文一样, 能够完好的保存至今, 而是被表意文字所替代, 究其原因, 并非像进化论所描述的一样, 优剩劣汰, 中文就是一个很好的印证, 没有任何证据能表明, 表意文字优秀于象形文字, 今日, 不难看出, 实际上象形文字因为其字库丰富所能表达出的语境比表意罗马字系统所能表达出更多更丰富的含义, 锲型文字的消失, 究其原因实质上是就是被利用了而已, 被使用罗马字系统的人; 古中亚, 欧洲, 曾出现过强盛的帝国, 这些使用锲型文字的地区都被征服了, 在其统治时期, 文字渐渐发生改变, 以至于后来的人们都忘记的锲型文字该如何书写.</p><p>中文系统因为所在区域的关系, 避免了这样的灾难, 从而得到了很好的发展, 并且影响了整个东亚地区, 现今多数东亚地区的文字书写系统或多或少都有受到中文的影响.</p><p>日语的出现, 可以说几乎是参考中文实现的, 从日本有文字开始, 最初几乎全部使用汉字作为载体, 但是到了后期因为诸多原因, 才导致了日文的出现, 而最大的目的仍然是利用中文的书写系统早就自己的文字. 在日本近代时期, 曾有计划全部抛弃中文书写系统, 全部使用日文假名, 但是在整改后发现, 其导致文字便的更加复杂, 这种做法也只是利用文字来摆脱与中文的关系.</p><p>而韩语, 同样也是因为这种原因, 才出现的书写系统, 现今的韩语最早出现的目的是因为一个被分封的诸侯想要独立, 参照汉字书写造就了自己的文字书写系统.</p><p>汉字自身从出现开始就一直不断的被完善, 被改造. 但是无论是某一次的改造的目的都只是被利用而已, 嫌甲骨文书写麻烦, 直到很长时间, 造就了隶书, 为了书写的美观, 造就了楷书, 为了减少汉字的复杂出现了行书; 汉字到目前最后一次大的改动实行简体字, 同样是利用文字而达到一定目的.</p><p>文字被创造以及破灭就是人类自身的问题, 当人类有了独立思考的能力之后, 让每个人都有自己的想法, 从而影响着很多事情. 人类有自己的私欲, 导致一切可以被利用的东西都当成了工具. 汉字是这样, 罗马字也是这样.</p><p>每一次的文字变革都有其支持者, 也有其反对者, 也真是因为这样才造就了汉字今天的两种版本.</p><p>说不上是好或坏, 这是人类社会自身的问题.</p><p>就像我在利用文字写这段话一样, 文字的出现就只是被利用.</p><p>我可以选择用任何一种文字来写, 当然前提是我得学会怎么去利用文字.</p><p>如果你愿意, 你可以利用你会的文字去读 《甲骨文》吧.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="甲骨文" scheme="https://blog.3u3.me/tags/%E7%94%B2%E9%AA%A8%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>舊博新開</title>
    <link href="https://blog.3u3.me/post/iaceob-come-back/"/>
    <id>https://blog.3u3.me/post/iaceob-come-back/</id>
    <published>2017-02-09T20:49:41.000Z</published>
    <updated>2021-01-13T05:36:19.729Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>算算日子, 恩, 總算是把以前博客給弄好了, 現在重新開放.</p><p>這次直接拋棄了 wordpress 直接靜態化成 html 也放入到了 github 中, 與現在的博客放在一起.</p><p>關於訪問, 做了一層中間代理, 從日本的服務器訪問 github 做代理到 <code>iaceob.3u3.me</code> 域名去, 同時在這個博客中用 robots 禁止爬蟲抓取當前博客的 <code>/iaceob</code> 目錄.</p><p>現博客目錄結構如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── archives</span><br><span class="line">├── CNAME</span><br><span class="line">├── css</span><br><span class="line">├── fonts</span><br><span class="line">├── index.html</span><br><span class="line">├── page</span><br><span class="line">├── post</span><br><span class="line">├── README.md</span><br><span class="line">├── robots.txt</span><br><span class="line">├── sitemap.xml</span><br><span class="line">├── tags</span><br><span class="line">└── iaceob</span><br><span class="line">    ├── archives</span><br><span class="line">    ├── page</span><br><span class="line">    ├── robots.txt</span><br><span class="line">    ├── sitemap.xml</span><br><span class="line">    └── tag</span><br></pre></td></tr></table></figure><p>因此, 實際上 <code>blog.3u3.me/iaceob</code> 其實也是可以直接訪問原博客的, 只是在 robots 中禁止了不讓爬蟲去抓取.</p><p>這樣 <code>iaceob.3u3.me</code> 就能實現 https 訪問了.</p><p>關於 https 訪問, 當前博客也想到了用 https 訪問的方案了, 因為這個博客本身是託管於 github 的, 如果直接用 github 提供的 io 域名訪問, 其實本身就支持 https, 但是, 因為使用了 CNAME 解析, 而 github 的 ssl 無法支持被 CNAME 的域名, 因此無法直接使用 https 訪問.<br>網絡中也搜索過相關問題解決方案, 包括很多另外的第三方再次託管, 瞭解之後發現, 那些第三方實際上就像和爬蟲一樣的東西, 實現的方案其實是將放到 github 的文章再次抓取到第三方的 web 服務中, 而你的域名是交給第三方去實現 ssl 的, 變相的看來, 就是第三方提供了一個支持 ssl 的虛擬空間而已, 且有些服務抓取的還不及時, 換皮不換藥, 還不一定穩定(但不失為一個好辦法).<br>這裡想到的解決方案, 前提是要有一臺自己的服務器(因此其實也算不上是太好的方案, 並不是沒人都有自己的服務器), 且能夠連接到 github , 對, 看來你想到什麼了.<br>其實原理很簡單, 就和我的舊博客一樣, 做一次代理即可, github 中不要使用 CNAME, 將你的域名指向到你的服務器, 然後在 nginx 中對域名進行代理到 github, 然後在 nginx 中實現 ssl, 這樣就完成了, 這樣就不會有不及時的問題, 也完全在自己控制.<br>如果不想要 github.io 的那份博客被搜索引擎抓取, 可直接在 robots 中禁止任何爬蟲抓取, 然後在自己的服務器中攔截 robots 設置 CNAME 的域名想要被抓取的域名, 或者簡單暴力的直接到各個搜索引擎告訴不要抓取那個 io 的域名即可(雖然我不知道搜索引擎有沒有提供這種功能).</p><p>最後</p><p>關於原博客重開, 樣式其實就是抄的當前用的這個樣式, 然後改了改, 還有文章因為是通過抓取來的, 而不是直接從數據庫中查的, wordpress 的數據表實在太麻煩了, 因此可能會有亂象出現, 不在意就好.</p><p>有趣的是, 這次重新弄之前的博客, 以外讓我學會了用 Inkscape, 雖然就只是非常簡單的使用, 重開的博客 <a href="https://iaceob.3u3.me/favicon.svg" target="_blank" rel="noopener">favicon</a> 就是我自己畫的.</p><p>從放棄原博客開始, 說要重新弄, 到現在都已經超過一年了, 時間過的真快, 拖延症也越來越嚴重了.</p><p>原博客以後就不會在動了, 就這麼放著吧.</p><p>今年的第一件要做的事情完成了.</p><p>就這樣.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="iaceob" scheme="https://blog.3u3.me/tags/iaceob/"/>
    
      <category term="blog" scheme="https://blog.3u3.me/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>《甲骨文》 選舉 節選</title>
    <link href="https://blog.3u3.me/post/oracle-election/"/>
    <id>https://blog.3u3.me/post/oracle-election/</id>
    <published>2017-02-03T22:04:24.000Z</published>
    <updated>2021-01-13T05:36:19.729Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>「沒錯，」石磊說：「她不是我的親生母親。我父親的原配 – 我母親 – 是幾年前在大陸去世了， 她沒有來成臺灣。一九四九年時，她不在南京，因為她要照顧她公公。她留了下來，希望我們後來會回去。」<br>街上下起了小雨。現在我明白了，為什麼石教授在回想他是哪一年結婚的時候，不像他回想古文物出土的日期那麼快速。那就是中國的歷史：你記得的事加上你試著要遺忘的事。在等計程車時，他的兒子轉向我。<br>「我比我父親晚一點來臺灣，」他說：「離開大陸之前，我母親讓我轉告父親一個口信。她說：萬一發生什麼事，他們不得不分開，他應該要再婚。我想她已感覺到，國家會走向分裂。」</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="甲骨文" scheme="https://blog.3u3.me/tags/%E7%94%B2%E9%AA%A8%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>再來呻吟</title>
    <link href="https://blog.3u3.me/post/moan-part-3/"/>
    <id>https://blog.3u3.me/post/moan-part-3/</id>
    <published>2017-01-27T23:26:15.000Z</published>
    <updated>2021-01-13T05:36:19.729Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>嗯.<br>又來發廢文.</p><p>最近越來越發現, 喔不, 是真的接近於擺脫低頭族. 也不說這是一件多麼值得慶幸的事情, 反而以目前的狀況而言, 會被很多人覺得是自己格格不入, 但是這種狀態還會繼續下去, 工具應該是你去用它, 而不是讓工具來玩你.</p><p>也就是因為這樣, 幾乎和來往過的人都很少有在聯絡, 當然, 這很大一部分也是自己的問題, 可以說的事情越來越少, 走的也越遠, 不過真正在意的並不會就因為這樣而淡化, 就是會有這樣的人 ~</p><p>活在現實裡吧.</p><p>還有喔, 這個約定應該說已經兌現了, 得有兩年多了吧.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">                                                 PM    AM</span><br><span class="line">| | | | | 22 | | | | | | | | | 23 | | | | | | | | | 00 | | | | | | | | | 01 | | | |</span><br></pre></td></tr></table></figure><p>可惜勒, 也只能是我知道了昂  ╮(╯_╰)╭</p><p>外面炮竹聲都響起來了.</p><p>算了, 就到這裡吧. 平時總是能想到好多, 反而到了要說出來的時候又全都憋回去了.</p><p>真是個無聊的人, 對, 就是這個人 ←_← </p><p>睡覺吧.</p><p>偶然, ↓↓↓↓</p>        <div id="aplayer-CFbLtalO" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-CFbLtalO"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "風の吹く方へ",              author: "森恵",              url: "https://mio.0u0.me/music/%E9%A2%A8%E3%81%AE%E5%90%B9%E3%81%8F%E6%96%B9%E3%81%B8-%E6%A3%AE%E6%81%B5.mp3",              pic: "https://p1.music.126.net/Rmku1iKzO5mvfoXzTSlvIw==/18742275208856316.jpg?param=500y500",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="moan" scheme="https://blog.3u3.me/tags/moan/"/>
    
  </entry>
  
  <entry>
    <title>《甲骨文》 風沙 節選</title>
    <link href="https://blog.3u3.me/post/oracle-sandstorm/"/>
    <id>https://blog.3u3.me/post/oracle-sandstorm/</id>
    <published>2017-01-21T15:13:12.000Z</published>
    <updated>2021-01-13T05:36:19.729Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>閒著無事, 我在腦海裡重建了這座小村莊: 一九七六年, 黨書記整修房子, 他用只有他才能訂閱的報紙當作壁紙, 含蓄地昭顯了自己的權威. 同一年, 房子修好了, 毛主席也死了, 開始了改革. 七年之後, 其他的村民也開始裝修房屋, 這回用的壁紙上寫的是跟改變中的經濟有關的標題. 一些村民在農休季節去了城裡當建築工人, 賺更多的錢, 耕種變得沒什麼吸引力. 到了一九九〇年代, 他們則離開鄉村, 尋找更好的出路. 剛開始是年輕人, 接著是中年人. 最後剩下的是老人, 只有他們還擁有本地色彩的記憶: 哪個當官的有權利, 村裡誰的田最多, 哪家在村裡住的時間最久. 所有這些記憶慢慢地望山坡下滑, 逐漸被大一點的村莊, 城鎮, 城市, 國家吞沒. 最後, 老人死了, 小村莊一片死寂.</p><p>這就是現代中國: 只需十年的時間, 一個地方就熟透得可以拿來考古. 我拿起背包, 掉頭向山坡下有人住的村子走去.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="節選" scheme="https://blog.3u3.me/tags/%E7%AF%80%E9%81%B8/"/>
    
      <category term="甲骨文" scheme="https://blog.3u3.me/tags/%E7%94%B2%E9%AA%A8%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>Nginx 奇怪的 403 Forbidden 問題</title>
    <link href="https://blog.3u3.me/post/nginx-strange-403-forbidden-bug/"/>
    <id>https://blog.3u3.me/post/nginx-strange-403-forbidden-bug/</id>
    <published>2017-01-07T23:49:40.000Z</published>
    <updated>2021-01-13T05:36:19.729Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>說是要將原博客內容靜態化的嘛, 為了在解析原博的文章時能夠快速的獲取, 用 <code>wget</code> 將原博客的所有內容都下載到本地了, 但是本地之前從沒安裝過 web 服務, 因此就現安裝了個 nginx, 安裝過程都很順利, 但是在配置訪問路徑卻遇到了 <code>403 Forbidden</code> 的錯誤, 能出現這個錯誤, 無非就是在 nginx 的網站配置中未指定 <code>index</code> (或者配置的路徑沒有 index 文件), 再有就是配置的路徑權限問題.</p><p>然而, 我測試了很多次, <code>index</code> 是有設置的, 且配置的路徑中也就 index 文件, 那就不應該是這個問題.</p><p>那很有可能是路徑權限的問題, 我看了下 nginx 安裝後默認生成的 web 目錄下的權限, 和我的 web 目錄權限, 發現都是一樣的, 差別就是 nginx 的 web 目錄所屬人和組是 <code>root</code> 而我的 web 目錄是當前賬戶的.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">~$ ls -la /usr/share/nginx/html</span><br><span class="line">drwxr-xr-x 2 root root 4096 11月 19 04:14 .</span><br><span class="line">drwxr-xr-x 3 root root 4096 11月 19 04:14 ..</span><br><span class="line">-rw-r--r-- 1 root root  537 11月 19 04:14 50x.html</span><br><span class="line">-rw-r--r-- 1 root root  612 11月 19 04:14 index.html</span><br><span class="line"></span><br><span class="line">~$ ls -la dev/wwwroot/</span><br><span class="line">drwxr-xr-x 4 iaceob iaceob 4096  1月  7 23:46 .</span><br><span class="line">drwxr-xr-x 3 iaceob iaceob 4096  1月  7 23:44 ..</span><br><span class="line">-rw-r--r-- 1 iaceob iaceob    7  1月  7 23:18 index.html</span><br><span class="line">drwxr-xr-x 6 iaceob iaceob 4096  6月 25  2016 store</span><br></pre></td></tr></table></figure><p>然後就測試將這個 web 目錄所屬改成 root, 但是仍然是 403.</p><p>去搜索 nginx 403 錯誤出來的結果, 解決方案, 大致幾種</p><ul><li>給 web 目錄 www-data(nginx) 賬戶權限<br>在安裝 nginx 後, 壓根就沒給我建立這個賬戶</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~$ id www-data</span><br><span class="line">id: ‘www-data’: no such user</span><br><span class="line">~$ id nginx</span><br><span class="line">id: ‘nginx’: no such user</span><br></pre></td></tr></table></figure><ul><li><p>給 web 目錄 775 權限<br>測試後發現仍然不行, 甚至設置 777 權限也不行 = =</p></li><li><p>修改 nginx 啟動賬戶</p></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#user html;</span></span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#error_log  logs/error.log;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pid        logs/nginx.pid;</span></span><br></pre></td></tr></table></figure><p>上面這個是安裝後的默認配置, <code>user</code> 這個配置是直接被註釋的, 那也就是不可能是啟動賬戶的問題, 拿 <code>systemctl</code> 啟動的 nginx 那默認賬戶應該就是 root.</p><p>那看似也不是目錄權限的問題了…</p><p>最後, 在測試了次, 把目錄建立在非當前賬戶目錄下, 平時為了方便, 所有工程都是放在自己賬戶根目錄下的, 測試時在 /opt 下建立了一個 web 目錄, 將 nginx 配置指向到該目錄, 竟然就可以了 (╯°Д°)╯ ┻━┻<br>在 opt 建立目錄需要用 root 賬戶才行, 為了測試是不是自己賬戶的所屬目錄不能作為 web 目錄, 將該目錄屬主和屬組都改成自己賬戶, 發現仍然可以 (╯°Д°)╯ ┻━┻</p><p>之所以優先設置自己賬戶目錄, 一是方便, 在一個另外一台線上的服務器就是這麼配置的都沒有發生問題, 不知道是不是新版本問題還是怎樣.<br>現在我能想到的問題有可能是跨硬盤的問題, 機器上有兩塊硬盤, 一個是 ssd 掛載的是 /home 也就是平時用的, 另一塊是機械硬盤, 掛了好幾個節點(純屬瞎猜).</p><p>問題算是解決了 = =</p><p>之後就將 opt 的 web 目錄, 放了一個軟鏈接到 home 來, 後面又測試了下, 將 nginx 的配置路徑改成 home 的軟鏈接也不行, 但是其他位置的就可以 (還放了一個 <code>/data/www -&gt; /opt/www</code> 的軟鏈接), <code>/opt/www</code> 和 <code>/data/www</code> 都可以, 就是軟鏈接到 home 的又變成 403 了.</p><p>奇怪 = =</p><p>該怎麼解釋這個問題了 .</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="nginx" scheme="https://blog.3u3.me/tags/nginx/"/>
    
      <category term="403" scheme="https://blog.3u3.me/tags/403/"/>
    
  </entry>
  
  <entry>
    <title>繼續呻吟</title>
    <link href="https://blog.3u3.me/post/moan-part-2/"/>
    <id>https://blog.3u3.me/post/moan-part-2/</id>
    <published>2016-12-31T21:50:44.000Z</published>
    <updated>2021-01-13T05:36:19.729Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>嗯 …<br>這裡沒有年終總結, 也從來都沒年終總結, 這個年也還沒完, 對.</p><p>不知道怎的, 一下子想到了某年前的今天 <a href="//iaceob.3u3.me/post/js-parse-lyric/" target="_blank" rel="noopener" title="至少在我沒將原文章恢復前, 是無法反問的">js 解析歌词</a>, 就是在大半夜寫的這篇文章, 其實寫的是什麼都忘記了, 只記得當時寫了好久, 已經第二天了.</p><p>沒多大變化, 又這樣度過這一年, 做了不少決定, 跑了半個天朝, 但是了 ╮(╯_╰)╭ , 仍然是一切如初, 甚至連一件值得提起的事情都沒有.</p><p>老早老早以前, 就說過, 不浮躁, 可是現在看回去, 不僅是沒做到, 而是真的浮躁起來了, 而且還養成了諸多自己都覺得是不好的習慣, 說起來, 也是自己太高估自己的自制力. 努力想要改變, 執行力又不夠, 想得總是很好, 但是就是沒法或者說拖延不想去做.</p><p>變成檢討文了, 還是停下來吧.</p><p>總之了, 這一年說不上好與不好, 只是完美的日常罷了, 很平淡無奇.</p><p>那麼. 接下來, 計劃下一年必須要做的事情, 至少會為此付諸行動.</p><ul><li>原博重新開放, 僅供閱覽</li><li>尋找對味的團隊</li><li>日語學習</li></ul><p>原博客重開實際已經早早就說要弄的了, 可惜也就因為這一年來將很多空閒時間都懶下來, 就沒有過認真做些有意義的事情, 一拖在拖, 到最後也沒做完.</p><p>對味團隊, 不求多好, 畢竟自身也存在很多不足. 但是 至少 不應該是像現在這樣. 沒有規劃, 想一出是一出. 如果哪天有心情, 後面會把這些經歷拿出來探討. 做好正確的選擇真的很重要.</p><p>日語學習. 嗯. 將是一整年的目標. 理由就只是興趣而已, 學習到至少我能夠用日語寫出整篇文章 ~</p><p>如果可能, 想再去看一本書, 今年把 《消失的江城》 看完了. 第二本(《甲骨文》)也因為後期懶惰放那積了一層灰, 並不是不想看, 現階段讀書大部分都是在百無聊賴 (實際上是無法接觸電子設備) 的時候才會翻閱書籍, 而當下這個機會又一次變少了, 導致這本書過了這麼久還沒看完一半. 書單中的下一本是 《銀河系漫遊指南》. 來見識下 <a href="http://coolshell.cn/articles/11170.html" target="_blank" rel="noopener">42</a> 這個人生和宇宙终级问题的答案吧.</p><p>順便說說, 今年本要執行的一個計劃 書籍共享. 但是卻沒有任何動作以及不準備在執行這計劃的原因, 一則是懶 = =, 再有, 後來關注了相關方面的信息, 主要是有兩點, 對於事物的多方考慮和有償的知識(物品)獲取.<br>若書籍共享計劃真可行, 是有可能便於讀著更加方便的獲取自己的所需, 但是這樣就會導致出書的人很不滿而導致質量下降, 原因就是, 作者以及出版商將能獲取到的利潤會進一步減少, 現今互聯網本身就如此發達, 閱讀紙質書的人已經很少, 如果真要改變也不應該是書籍共享, 而是考慮用更進一步的方式去閱讀, 例如 kindle.<br>再一個, 有償的知識(物品)獲取, 你不應該有任何免費獲取的概念, 所有的事物都應該遵循等價交換的原則, 你所閱讀的書籍是作者花了很多心血的作品.</p><p>那麼, 讓日常繼續吧.</p><div id="aplayer-OqImvNGy" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;"><pre class="aplayer-lrc-content">[00:16.320]君がいつかくれたmessage[00:21.280]耳の奥でじんとなる[00:26.610]かたっぽ足りない毎日に[00:31.830]探してたもの 見つけたんだ[00:37.800]僕のちっぽけな頭じゃ分からない[00:42.760]じんとした歌も作れない[00:48.020]せめて一つでいい 手遅れになる前に[00:54.110]ah… つかもう[00:57.530]melody 行き交う人 そばにいる人の中に[01:03.850]melody 君の中に ah[01:09.120]melody 探してたものがあったの ah[01:14.740]melody message[01:30.060]見えない明日怖がったり[01:35.090]自分にさえ疲れたり[01:40.320]そんなことはもうやめよう〖[01:45.750]大丈夫だって言ってくれた[01:51.660]いつでもそれはね 近くにあるのに[01:56.540]きっと見失ってたんだ[02:01.880]いまならできるよ 少し怖いけど[02:06.630]ここで…進もう[02:11.320]melody 行き交う人 そばにいる人に聞こえる[02:17.650]melody 君の中に ah[02:22.980]melody 誰の中にだってあるもの[02:28.720]melody message[02:32.160]oh oh 右か左か白か黒[02:35.530]いつでも僕は迷っていたんだ[02:38.450]目の前にあることさえも気づかず[02:42.580]oh oh 右か左か白か黒[02:46.020]いつでも僕は探していたんだ[02:48.860]音にのって届けるの 君に…[02:52.850]ah melody 行き交う人 そばにいる人に伝える[02:59.890]melody 君のために ah[03:05.220]melody 僕の声は聞こえるかな？ ah[03:10.680]melody message[03:15.540]tuturu tuturu melody…</pre></div><script>var ap = new APlayer({element: document.getElementById("aplayer-OqImvNGy"),narrow: false,autoplay: false,showlrc: 2,music: {title: "M/elody",author: "辻詩音",url: "https://mio.0u0.me/music/%E8%BE%BB%E8%A9%A9%E9%9F%B3%20-%20M%20elody.mp3",pic: "https://p2.music.126.net/aB8lIZW1lNAPw-XA9lHVCA==/2259496395102103.jpg?param=500y500",}});window.aplayers || (window.aplayers = []);window.aplayers.push(ap);</script><p>抱歉, 夢裡的那隻貓, 做了很不應該做的事. 有可能這是自己的本性, 但是對不起.</p><p>又到了第二年了.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="moan" scheme="https://blog.3u3.me/tags/moan/"/>
    
  </entry>
  
  <entry>
    <title>ng2 app</title>
    <link href="https://blog.3u3.me/post/final-ng-II-part-2/"/>
    <id>https://blog.3u3.me/post/final-ng-II-part-2/</id>
    <published>2016-12-17T15:08:47.000Z</published>
    <updated>2021-01-13T05:36:19.729Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>繼 <a href="/post/final-ng-II-part-1" title="ng2 ngcli">上一文</a>, 通過 ngcli 已經建立了一個可運行的工程.</p><p>這次來熟悉 ng2 開發方式.</p><p>首先, 執行 <code>ng s</code> (ng server 別名) 來啟動使用 ngcli 創建的工程, 瀏覽器訪問 <code>localhost:4200</code>, 會看到一行很大的 <code>app works!</code> , 那麼就啟動成功了.</p><h2 id="運作方式"><a href="#運作方式" class="headerlink" title="運作方式"></a>運作方式</h2><p>在開始進行編碼之前, 先來認知 ng2 <code>component</code>, ng2 應用是由很多個 component 組成的, 一個頁面中可以有多個 component, 因此在構建頁面時可以將不同功能部分代碼拆解城多個 component.</p><p>打開 <code>src/app/app.component.ts</code> 文件, 可以看到這些代碼</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent &#123;</span><br><span class="line">  title = <span class="string">'app works!'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@Component</code> 是用來聲明這個 component, 裡面有三個值 (@ 是 es6 中提出的 <a href="http://es6.ruanyifeng.com/?search=decorator&x=0&y=0#docs/decorator" target="_blank" rel="noopener">decorator</a> 語法, ):</p><ol><li><code>selector</code> 在 html 中的某個節點上使用當前 component (支持 css 選擇器, 但是如果選擇器有多個結果, 僅使用第一個)</li><li><code>templateUrl</code> 此 component 使用的模板文件地址</li><li><code>styleUrls</code> 此 component 使用的樣式文件</li></ol><p>這里默認創建的 component 所選取的節點 <code>app-root</code> 就是在 <code>src/index.html</code> 裡面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">type</span>=<span class="string">"image/x-icon"</span> <span class="attr">href</span>=<span class="string">"favicon.ico"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">app-root</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">app-root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>簡單的理解就是, 當執行到 app.component.ts 時, 選取 app-root 節點, 將 app component 的內容渲染進去, 整個執行過程大致為:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">src&#x2F;main.ts -&gt; src&#x2F;app&#x2F;index.ts -&gt; [src&#x2F;app&#x2F;app.module.ts | src&#x2F;app&#x2F;app.component.ts]</span><br></pre></td></tr></table></figure><p>在 app.component.ts 中, 有設置一個變量 <code>title = &#39;app works!&#39;;</code> 這個 app works! 就是開啟這個應用後訪問瀏覽器所看到的文字.</p><p>那這個變量又是如何顯示到頁面的了?</p><h2 id="數據綁定"><a href="#數據綁定" class="headerlink" title="數據綁定"></a>數據綁定</h2><h3 id="模板取值"><a href="#模板取值" class="headerlink" title="模板取值"></a>模板取值</h3><p>數據綁定這個應該不陌生, 在 ng1 中也是有數據綁定概念的, ng1 中的數據綁定實現, 是通過在控制器 (controller) 中設置變量, 模板從控制器中使用  方式獲取在控制器中的變量, 獲取使用 <code>ng-bind</code> 屬性.</p><p>在 ng2 中也有數據綁定, 且使用方式與 ng1 也大體相同, 同是使用  在模板中獲取變量, 但是 <code>ng-bind</code> 屬性綁定方式略有改變.</p><p>打開 <code>src/app/app.component.html</code> 會看到</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">  &#123;&#123;title&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>這就是 app component 這個組件的模板, 展示 title 的內容.</p><blockquote><p>app.component.ts 在完成自己組件內容後, 將結果寫入到 app-root 標籤中, 這就是 component 的整個流程.</p></blockquote><p>接下來詳細看看的數據綁定方式</p><p>用標識符取值方式, 與 ng1 大體相同, 可簡單的將其看為是一個臨時的在 html 中可執行 js 腳本的區域, 當然這個可執行的 js 空間作用域僅在當前這個 component 中, 可以直接調用這個 component 中的函數或者變量.</p><p>例如在 app.component.ts 中修改</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent &#123;</span><br><span class="line">  title = <span class="string">'app works!'</span>;</span><br><span class="line"></span><br><span class="line">  getDate()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接著在 app.component.html 中添加</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">  &#123;&#123;title&#125;&#125;</span><br><span class="line">  &#123;&#123;'Now: ' + getDate()&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再打開瀏覽器就能看到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app works! Now: Sat Dec 17 2016 16:12:50 GMT+0800 (CST)</span><br></pre></td></tr></table></figure><p>另外一種就是 bind 數據綁定方式, 寫在標籤屬性中</p><p>例如在模板中添加</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> [<span class="attr">placeholder</span>]=<span class="string">"holder"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 app.component.ts 中添加</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">holder=<span class="string">'Name'</span>;</span><br></pre></td></tr></table></figure><p>再去看頁面, 就會發現多了一個輸入框, 且輸入框有默認文字 Name</p><blockquote><p><strong>與 ng1 不同之處:</strong><br>在 ng1 中, <code>ng-bind</code> 可以接收從控制器來的數據並展示, 但是 ng-bind 展示的內容是放入到標籤之中的, 而 ng2 的綁定方式略有改變, 沒有再使用 <code>ng-bind</code>, 如果要望標籤中寫入內容可通過使用標識符方式.<br>ng1 中若要給標籤屬性複製, 通過</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">"&#123;&#123;title&#125;&#125;"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br></pre></td></tr></table></figure><p>而 ng2 則是直接使用 [] 包含屬性名, 配變量值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> [<span class="attr">title</span>]=<span class="string">"title"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br></pre></td></tr></table></figure><p>當然, ng2 也是支持與 ng1 一樣的方式給屬性賦值.</p></blockquote><h3 id="事件綁定"><a href="#事件綁定" class="headerlink" title="事件綁定"></a>事件綁定</h3><p>事件用來捕獲用戶操作, 在 ng2 中可通過 <code>(event name)=&quot;something&quot;</code> 來進行事件捕獲.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">"button"</span> (<span class="attr">click</span>)=<span class="string">"testEvent($event)"</span>&gt;</span>Click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">testEvent(event)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Test event'</span>, event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 app.component.html 與 app.component.ts 分別加入後, 打開瀏覽器, 點擊 Click 按鈕, 會看到控制台打印了一條 ‘Test event’ 的日誌, 且後面有一次此次 event 的詳細信息.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Test event click &#123; target: &lt;button&gt;, buttons: 0, clientX: 24, clientY: 266, layerX: 24, layerY: 266 &#125;</span><br></pre></td></tr></table></figure><h3 id="雙向綁定"><a href="#雙向綁定" class="headerlink" title="雙向綁定"></a>雙向綁定</h3><p>與 ng1 形同, ng2 也支持數據的雙向綁定, 也就是無論是模板中修改了某個變量的值, 同時會在 component 中修改該變量的值, 使用方式與 ng1 大致相同.</p><p>在 app.component.html 中加入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> [(<span class="attr">ngModel</span>)]=<span class="string">"title"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然後打開瀏覽器, 會看到一個輸入框, 且賦值為 <code>app works!</code>, 可以去嘗試修改這個輸入框會發生什麼事情.</p><h2 id="component-通信-amp-amp-流程控制"><a href="#component-通信-amp-amp-流程控制" class="headerlink" title="component 通信 &amp;&amp; 流程控制"></a>component 通信 &amp;&amp; 流程控制</h2><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>一個頁面中可能存在多個 component, component 之間的通信可通過 <code>@Input</code> <code>@Output</code> 進行通信.</p><p>示例:</p><p>首先, 通過 <code>ng</code> 創建一個新的 component</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng g c comp/show</span><br></pre></td></tr></table></figure><p>創建一個名為 show 的 component, 放置與 src/app/comp/show 目錄 (自動放置, 但是 comp 目錄需要自己創建, 具體參考 <a href="/post/final-ng-II-part-1">ng2 ngcli</a>).</p><p>創建完成後, 目錄結構像這樣</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">src&#x2F;app&#x2F;comp</span><br><span class="line">└── show</span><br><span class="line">    ├── show.component.css</span><br><span class="line">    ├── show.component.html</span><br><span class="line">    ├── show.component.spec.ts</span><br><span class="line">    └── show.component.ts</span><br></pre></td></tr></table></figure><p>接著, 到 app.component.html 中增加 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">app-show</span>&gt;</span><span class="tag">&lt;/<span class="name">app-show</span>&gt;</span></span><br></pre></td></tr></table></figure><p>讓 show 組件的內容顯示在 app 中, 這裡的 app-show 標籤可以是自定義的, 但是自定義的話, 就需要去修改 <code>show.component.ts</code> 中關於 component 組件聲明的 <code>selector</code> 選擇器. 只要二者相同即可.</p><p>這時打開網頁就能看到, 在頁面中已經加入了 show component 的內容了.</p><p>接下來, 使用創建一個數據模型(接口) interface 用於指定數據格式. (interface 是 typescript 提供的語法, 其目的就是為了創建一個統一的數據模型.)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng g interface entity/item</span><br></pre></td></tr></table></figure><p>編輯添加的文件, 修改內容為</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> Item &#123;</span><br><span class="line">    id: <span class="built_in">number</span>;</span><br><span class="line">    value: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 app.component.ts 頂部引入 Item</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Item &#125; <span class="keyword">from</span> <span class="string">'./entity/item'</span>;</span><br></pre></td></tr></table></figure><p>並且加入幾個預定義數據, 最終 app.component.ts 像這樣</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Item &#125; <span class="keyword">from</span> <span class="string">'./entity/item'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">    selector: <span class="string">'app-root'</span>,</span><br><span class="line">    templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">    styleUrls: [<span class="string">'./app.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent &#123;</span><br><span class="line">    title = <span class="string">'app works!'</span>;</span><br><span class="line"></span><br><span class="line">    holder = <span class="string">'Name'</span>;</span><br><span class="line"></span><br><span class="line">    items: Item[] = [</span><br><span class="line">      &#123;id: <span class="number">1</span>, value: <span class="string">'Europe'</span>&#125;,</span><br><span class="line">      &#123;id: <span class="number">2</span>, value: <span class="string">'Africa'</span>&#125;,</span><br><span class="line">      &#123;id: <span class="number">3</span>, value: <span class="string">'Oceania'</span>&#125;</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> getDate() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> testEvent(event: MouseEvent) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Test event'</span>, event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下來的步驟就是通信的實現.</p><p>再次打開剛剛編輯的 app.component.html, 將剛剛添加的 app-show 添加一個屬性</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;app-show [itemList]=<span class="string">"items"</span>&gt;&lt;<span class="regexp">/app-show&gt;</span></span><br></pre></td></tr></table></figure><p>這裡表達的是, 將 itemList 視為一個屬性, 並且將 items 傳遞進 app-show 中, 那麼在 app-show 中就可以通過 <code>@Input</code> 來獲取這個 <code>itemList</code>, 因此修改 show.component.ts 為</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit, Input &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Item &#125; <span class="keyword">from</span> <span class="string">'../../entity/item'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-show'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./show.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./show.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ShowComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Input</span>() itemList: Item[];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先, 從 <code>&#39;@angular/core&#39;</code> 中加入引用 <code>Input</code>, 接著引入 <code>Item</code> 因為 傳遞進來的數據就是 Item 類型.</p><p>之後就是新增的 <code>@Input() itemList: Item[];</code> 這樣一行代碼, 就是用來接收從 app component 中傳遞過來的 item 數據.<br>其 <code>@Input</code> 就是用來表示數據是從外部輸入進來, Input 默認將後面的變量名作為接收的屬性名稱, 同時也可以自定義, <code>@Input(itemList) items: item[]</code> , 這樣就表示是從 itemList 屬性接收屬性, 將值賦給 items 變量.</p><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><h4 id="ngFor"><a href="#ngFor" class="headerlink" title="ngFor"></a>ngFor</h4><p>通過 Input 在 show 組件中已經能接收到從 app 組件中傳遞的 items<br>那麼, 在 show 組件中, 就能通過 ngFor 來展示這些 item.</p><p>修改 show.component.html 為如下內容:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">"let item of items"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">"&#123;&#123;item.id&#125;&#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"&#123;&#123;item.id&#125;&#125;"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span> &#123;&#123; item.value &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>這裡使用了 <code>*ngFor</code> 來遍歷從 app 組件中傳遞過來的 items.<br>需要注意的是 <code>htmlFor</code>, 此處主要是因為 for 為 javascript 關鍵字, 所以此處將其換為 htmlFor, 此外也可以只用 <code>attr.for</code> 的方式, 表示此為 html 屬性.</p><h4 id="ngIf"><a href="#ngIf" class="headerlink" title="ngIf"></a>ngIf</h4><p><code>ngIf</code> 用於進行邏輯判斷, 例如這裡, 如果有超過 2 個 item 就提示數量過多</p><p>那麼就在 show.component.html 最後加入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> *<span class="attr">ngIf</span>=<span class="string">"items.length &gt; 2"</span>&gt;</span>Items length <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color: #f00"</span>&gt;</span>(&#123;&#123;items.length&#125;&#125;)<span class="tag">&lt;/<span class="name">span</span>&gt;</span> too much<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>為了說明 Output, 再來建立一個 component 叫做 add, 用向 app 的 items 中添加新的數據.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng g c comp/add</span><br></pre></td></tr></table></figure><p>然後將 add 組件的模板加入到 app 中, 也就是在 app.component.html 中加入 app-add 標籤, 並且在標籤中添加一個叫做 addItem 的事件綁定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">app-add</span> (<span class="attr">addAppItem</span>)=<span class="string">"addAppItem($event)"</span>&gt;</span><span class="tag">&lt;/<span class="name">app-add</span>&gt;</span></span><br></pre></td></tr></table></figure><p>左側的 <code>(addItem)</code> 是用於給 add 組件向外綁定事件指定的事件名稱, 右側的 <code>addItem($event)</code> 則是調用此模板所屬的組件, 此處所屬的組件是 app, 也就是調用 <code>app.component.ts</code> 中的 addItem 方法.<br>那麼就在 app.component.ts 中添加該方法.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">addItem(value) &#123;</span><br><span class="line">    <span class="keyword">this</span>.items.push(&#123;</span><br><span class="line">        id: +<span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">        value: value</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>剩下來的事就是, 在 add 組件中, 增加一個表單, 使其添加的數據提交給 app 組件中的 addItem 方法就能夠完成數據的添加了.</p><p>add.component.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> [(<span class="attr">ngModel</span>)]=<span class="string">"value"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">"addItem($event)"</span>&gt;</span>Add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>add.component.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-add'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./add.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./add.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AddComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  value;</span><br><span class="line"></span><br><span class="line">  addItem($event) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那麼, add 的表單功能完成, 並且能收到添加的 item, 最後, 就是將收到的值傳給 app 組件, 將其加入到 app 組件中的 items 然後在 show 組件中進行顯示.</p><p>傳遞 add 中輸入的值就是使用 <code>@Output</code></p><p>Output 使用, 首先在 add 組件中引入 Output 以及 EventEmitter, 在 add.component.ts 中修改 import</p><p>add.component.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit, Output, EventEmitter &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br></pre></td></tr></table></figure><p>然後添加一個用來處理事件的 EventEmmitter, 將 add 組件中的添加事件通過 EventEmmitter 傳遞出此組件到其他組件.</p><p>最終 add.component.ts 看起來像這樣</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit, Output, EventEmitter &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-add'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./add.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./add.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AddComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  value;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Output</span>() addAppItem = <span class="keyword">new</span> EventEmitter();</span><br><span class="line"></span><br><span class="line">  addItem($event) &#123;</span><br><span class="line">    <span class="comment">// console.log(this.value);</span></span><br><span class="line">    <span class="keyword">this</span>.addAppItem.emit(<span class="keyword">this</span>.value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@Output() addAppItem = new EventEmitter();</code> 就是用來創建一個事件, addItem 是 add 組件中定義的事件, 用於接收 add 模板的點擊, 當點擊後, 將這個事件通過 上面創建的 EventEmitter 轉發出此組件所在的父組件, 此處也就是 app 中, 至於最終尋找的是父組件中的哪一個事件, 與 Input 一樣, Output 默認去後面的參數名, 也可以通過 <code>@Output(&#39;name&#39;)</code> 指定.</p><p>到這裡, component 通信以及流程控制就完成了, 從添加到展示全部實現.</p><h2 id="樣式"><a href="#樣式" class="headerlink" title="樣式"></a>樣式</h2><p>ng2 與 ng1 還有個很大不同的地方是, ng1 中樣式的管理方式, 任何一個控制器所使用 class 都是通用的. 而 ng2 則增加了作用域的概念, 看使用 ngcli 創建的 component 就能發現, 創建組件的時候, 給增加了 一個 name.component.css 的文件, 該文件就是這個組件所獨有的樣式文件, 添加的任何樣式都不會影響到其他的組件, 同時一個組件中還可以使用多個樣式文件, 只要在 component 聲明中指定文件地址即可</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-add'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./add.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./add.component.css'</span>, <span class="string">'./add-2.component.css'</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>除了獨有的樣式文件, 也有所有公用的樣式文件, 該文件的位置為 <code>src/styles.css</code> 在該文件中添加的樣式是所有組件都能夠使用的.</p><p>一些測試.<br>如上面案例的列表展示, 實現隔行換色的效果.</p><p>在 show.component.css 中添加 light 樣式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.light</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然後修改 show.component.html 的遍歷</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">"let item of items; let i = index"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">"&#123;&#123;item.id&#125;&#125;"</span> [<span class="attr">ngClass</span>]=<span class="string">"&#123;'light': i%2==0&#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"&#123;&#123;item.id&#125;&#125;"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span> &#123;&#123; item.value &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>這裡, 在 ngFor 中增加了一個獲取當前索引的變量 i, 接著, 在 label 標籤中增加了 ngClass 用來實現隔行換色.</p><p>如果, 將 light 樣式放入到 add.component.css 中就會發現, 隔行換色沒有了效果, 放入到 src/styles.css 中發現也是可用的.</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>ng2 中一個比較亂的地方, 就是各種使用 [] () , 很容易就弄暈, 是該用 [] 還是 (), 甚至還有 [()] 這種方式….<br>簡單的來說</p><ul><li><strong>[]</strong> 用來進行 <a href="#模板取值">屬性綁定</a><br>屬性綁定又分幾種<ul><li>html 標籤自帶屬性綁定, 例如 <code>[title]=&quot;title&quot;</code></li><li>ng2 提供的屬性, 例如 <code>[ngClass]=&quot;light&quot;</code>, 通常值會有獨特的用法</li><li>自定義屬性, 例如文中的 <code>[itemList]</code>, 但是這個自定義屬性一定要有去實現的地方, 文中的 itemList 就是讓 show.component.ts 使用 @Input 接收</li></ul></li><li><strong>()</strong> 用來進行 <a href="#事件綁定">事件綁定</a></li><li><strong>[()]</strong> 用來進行 <a href="#雙向綁定">雙向綁定</a></li><li><strong>*</strong> 用來標識是 ng2 提供的屬性<br>例如 <code>*ngFor</code> <code>*if</code> , 可在值中輸入 js 腳本</li></ul><p>ng2 相對 ng1 來說確實是複雜很多, 再有一個是這裡使用的是 TypeScript, 在寫 ng2 的時候至少應該要對 TypeScript 有著相應的瞭解, 雖然說可以切換為 JavaScript 或者其他腳本去實現, 看你喜好.</p><p>ng2 剩下來要說的就是路由功能了, 然而 angular2 現在雖然已經進入正式版了, 但是目前 ngcli 仍然不能創建路由 (ng g r), 關於路由的使用方式可以看官方文檔 <a href="https://angular.io/docs/ts/latest/guide/router.html" target="_blank" rel="noopener">Routing &amp; Navigation </a>.</p><p>都第二天了…. 寫好久 = =</p><p>就這樣吧 ~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="ng2" scheme="https://blog.3u3.me/tags/ng2/"/>
    
      <category term="angularjs" scheme="https://blog.3u3.me/tags/angularjs/"/>
    
  </entry>
  
  <entry>
    <title>letsencrypt 交互式脚本</title>
    <link href="https://blog.3u3.me/post/letsencrypt-auto-shell/"/>
    <id>https://blog.3u3.me/post/letsencrypt-auto-shell/</id>
    <published>2016-12-04T16:35:14.000Z</published>
    <updated>2021-01-13T05:36:19.729Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="赘述"><a href="#赘述" class="headerlink" title="赘述"></a>赘述</h2><blockquote><p>随着国内网络环境的持续恶化，各种篡改和劫持层出不穷，越来越多的网站选择了全站 HTTPS。就在今天，免费提供证书服务的 <a href="https://letsencrypt.org/" target="_blank" rel="noopener">Let’s Encrypt</a> 项目也正式开放，HTTPS 很快就会成为 WEB 必选项。HTTPS 通过 TLS 层和证书机制提供了内容加密、身份认证和数据完整性三大功能，可以有效防止数据被查看或篡改，以及防止中…</p></blockquote><p><a href="https://imququ.com/post/sth-about-switch-to-https.html" target="_blank" rel="noopener">不抄了</a>…</p><p>这里要说的是, 使用脚本去开启 https 认证.</p><p>此脚本是根据 <a href="https://imququ.com/post/letsencrypt-certificate.html" target="_blank" rel="noopener">Let’s Encrypt，免费好用的 HTTPS 证书</a> 所阐述的内容而进行修改的交互式执行脚本.</p><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><p><strong>ecpt.sh</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 自动设定 Let's Encrypt https</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 脚本执行路径</span></span><br><span class="line">BIN_PATH=$(dirname $(readlink -f <span class="variable">$0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">## 证书存储目录</span></span><br><span class="line">F_CERT_STORE=</span><br><span class="line"><span class="comment">## nginx ssl 验证目录</span></span><br><span class="line">F_NGINX_VERIFY=</span><br><span class="line"><span class="comment">## nginx 自定义配置文件目录</span></span><br><span class="line">F_NGINX_CONF=</span><br><span class="line"><span class="comment">## 私钥类型</span></span><br><span class="line">CSR_TYPE=</span><br><span class="line"><span class="comment">## ecc 私钥加密算法</span></span><br><span class="line">ECC_ALGO=</span><br><span class="line"><span class="comment">## 域名</span></span><br><span class="line">DOMAINLIST=</span><br><span class="line"><span class="comment">## openssl 配置文件</span></span><br><span class="line">OPENSSLCONFIG=</span><br><span class="line">OPENSSLCONFIGPATHETC=/etc/ssl/openssl.cnf</span><br><span class="line">OPENSSLCONFIGPATHUSR=/usr/<span class="built_in">local</span>/openssl/ssl/openssl.cnf</span><br><span class="line">OPENSSLCONFIGPATHPKI=/etc/pki/tls/openssl.cnf</span><br><span class="line"><span class="comment">## 预定义文件名</span></span><br><span class="line">SSL_VERIFY_CONF=ssl_verify.conf</span><br><span class="line">SYNC_SH=sync.sh</span><br><span class="line"></span><br><span class="line">ACCOUNT_KEY=account.key</span><br><span class="line">DOMAIN_KEY=domain.key</span><br><span class="line">DOMAIN_CSR=domain.csr</span><br><span class="line">DOMAIN_LIST_BACK=domain.list</span><br><span class="line">SIGNED_CRT=signed.crt</span><br><span class="line">CHAINED_PEM=chained.pem</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">log</span></span>()&#123;</span><br><span class="line">    TYPE=`tr <span class="string">'[a-z]'</span> <span class="string">'[A-Z]'</span> &lt;&lt;&lt;<span class="string">"<span class="variable">$1</span>"</span>`</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"[<span class="variable">$&#123;TYPE&#125;</span>]: <span class="variable">$2</span>"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">isRoot</span></span>()&#123;</span><br><span class="line">  <span class="keyword">if</span> [ `id -u` -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">return</span> 1</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  <span class="built_in">return</span>  0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">userInput</span></span>()&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">read</span> -p <span class="string">'* 选择证书存储目录: '</span> F_CERT_STORE</span><br><span class="line">  <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$F_CERT_STORE</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">log</span> error <span class="string">'请输入目录'</span></span><br><span class="line">    <span class="built_in">return</span> 0</span><br><span class="line">    <span class="comment"># xTODO 测试临时使用</span></span><br><span class="line">    <span class="comment"># F_CERT_STORE=/tmp/cert</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">if</span> [ ! -d <span class="string">"<span class="variable">$F_CERT_STORE</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    mkdir -p <span class="variable">$F_CERT_STORE</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">read</span> -p <span class="string">'* 选择 nginx ssl 验证目录: '</span> F_NGINX_VERIFY</span><br><span class="line">  <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$F_NGINX_VERIFY</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">log</span> error <span class="string">'请输入 nginx ssl 验证目录'</span></span><br><span class="line">    <span class="built_in">return</span> 0</span><br><span class="line">    <span class="comment"># xTODO 测试临时使用</span></span><br><span class="line">    <span class="comment"># F_NGINX_VERIFY=/tmp/cert/verify/</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">if</span> [ ! -d <span class="string">"<span class="variable">$F_NGINX_VERIFY</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    mkdir -p <span class="variable">$F_NGINX_VERIFY</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">read</span> -p <span class="string">'* 选择 nginx 自定义配置文件目录: '</span> F_NGINX_CONF</span><br><span class="line">  <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$F_NGINX_CONF</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">log</span> error <span class="string">'请输入 nginx 自定义配置文件目录'</span></span><br><span class="line">    <span class="built_in">return</span> 0</span><br><span class="line">    <span class="comment"># xTODO 测试临时使用</span></span><br><span class="line">    <span class="comment"># F_NGINX_CONF=/tmp/cert/conf.d</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">if</span> [ ! -d <span class="string">"<span class="variable">$F_NGINX_CONF</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">log</span> error <span class="string">'未发现 nginx 自定义配置文件目录'</span></span><br><span class="line">    <span class="built_in">return</span> 0</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="built_in">read</span> -p <span class="string">'选择私钥加密类型(RSA/ECC)(RSA): '</span> CSR_TYPE</span><br><span class="line">  <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$CSR_TYPE</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    CSR_TYPE=RSA</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  CSR_TYPE=`tr <span class="string">'[a-z]'</span> <span class="string">'[A-Z]'</span> &lt;&lt;&lt;<span class="string">"<span class="variable">$CSR_TYPE</span>"</span>`</span><br><span class="line">  <span class="keyword">if</span> [[ <span class="string">"<span class="variable">$CSR_TYPE</span>"</span>x != <span class="string">"RSA"</span>x &amp;&amp; <span class="string">"<span class="variable">$CSR_TYPE</span>"</span>x != <span class="string">"ECC"</span>x ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">log</span> error <span class="string">'仅支持 RSA 或 ECC 类型'</span></span><br><span class="line">    <span class="built_in">return</span> 0</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">"<span class="variable">$CSR_TYPE</span>"</span> = <span class="string">"ECC"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">read</span> -p <span class="string">'选择 ECC 加密算法 [1: secp256r1] [2: secp384r1] (1): '</span> ECC_ALGO</span><br><span class="line">    <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$ECC_ALGO</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">      ECC_ALGO=1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">if</span> [[ <span class="string">"<span class="variable">$ECC_ALGO</span>"</span> -ne 1 &amp;&amp; <span class="string">"<span class="variable">$ECC_ALGO</span>"</span> -ne 2 ]]; <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">log</span> error <span class="string">'选择正确的算法 [1: secp256r1] [2: secp384r1]'</span></span><br><span class="line">      <span class="built_in">return</span> 0</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">read</span> -p <span class="string">'* 输入认证的域名[多个使用 , 区分]: '</span> DOMAINLIST</span><br><span class="line">  <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$DOMAINLIST</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">log</span> error <span class="string">'至少需要一个域名'</span></span><br><span class="line">    <span class="built_in">return</span> 0</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$DOMAINLIST</span> &gt; <span class="variable">$F_CERT_STORE</span>/<span class="variable">$DOMAIN_LIST_BACK</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">read</span> -p <span class="string">'openssl 配置文件地址(/etc/ssl/openssl.cnf): '</span> OPENSSLCONFIG</span><br><span class="line">  <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$OPENSSLCONFIG</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    OPENSSLCONFIG=/etc/ssl/openssl.cnf</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">return</span> 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">createAccount</span></span>()&#123;</span><br><span class="line">  openssl genrsa 4096 &gt; <span class="variable">$F_CERT_STORE</span>/<span class="variable">$ACCOUNT_KEY</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">createPrivateKey</span></span>()&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">"<span class="variable">$CSR_TYPE</span>"</span>x = <span class="string">"RSA"</span>x ]; <span class="keyword">then</span></span><br><span class="line">      openssl genrsa 4096 &gt; <span class="variable">$F_CERT_STORE</span>/<span class="variable">$DOMAIN_KEY</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">"<span class="variable">$CSR_TYPE</span>"</span>x = <span class="string">"ECC"</span>x ]; <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$ECC_ALGO</span> -eq 1 ]; <span class="keyword">then</span></span><br><span class="line">      openssl ecparam -genkey -name secp256r1 | openssl ec -out <span class="variable">$F_CERT_STORE</span>/<span class="variable">$DOMAIN_KEY</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$ECC_ALGO</span> -eq 2 ]; <span class="keyword">then</span></span><br><span class="line">      openssl ecparam -genkey -name secp384r1 | openssl ec -out <span class="variable">$F_CERT_STORE</span>/<span class="variable">$DOMAIN_KEY</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">createCSR</span></span>() &#123;</span><br><span class="line">  OLCG=</span><br><span class="line">  <span class="keyword">if</span> [[ -z <span class="string">"<span class="variable">$OLCG</span>"</span> &amp;&amp; -f <span class="string">"<span class="variable">$OPENSSLCONFIGPATHETC</span>"</span> ]]; <span class="keyword">then</span></span><br><span class="line">    OLCG=<span class="variable">$OPENSSLCONFIGPATHETC</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">if</span> [[ -z <span class="string">"<span class="variable">$OLCG</span>"</span> &amp;&amp; -f <span class="string">"<span class="variable">$OPENSSLCONFIGPATHUSR</span>"</span> ]]; <span class="keyword">then</span></span><br><span class="line">    OLCG=<span class="variable">$OPENSSLCONFIGPATHUSR</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">if</span> [[ -z <span class="string">"<span class="variable">$OLCG</span>"</span> &amp;&amp; -f <span class="string">"<span class="variable">$OPENSSLCONFIGPATHPKI</span>"</span> ]]; <span class="keyword">then</span></span><br><span class="line">    OLCG=<span class="variable">$OPENSSLCONFIGPATHPKI</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">if</span> [ ! -z <span class="string">"<span class="variable">$OPENSSLCONFIG</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    OLCG=<span class="variable">$OPENSSLCONFIG</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  DNS=$(genDNS)</span><br><span class="line">  <span class="comment"># log debug $DNS</span></span><br><span class="line"></span><br><span class="line">  cp <span class="variable">$OLCG</span> <span class="variable">$F_CERT_STORE</span>/openssl.cnf</span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">'[SAN]\nsubjectAltName='</span><span class="variable">$DNS</span> &gt;&gt; <span class="variable">$F_CERT_STORE</span>/openssl.cnf</span><br><span class="line">  openssl req -new -sha256 -key <span class="variable">$F_CERT_STORE</span>/<span class="variable">$DOMAIN_KEY</span> -subj <span class="string">"/"</span> -reqexts SAN -config <span class="variable">$F_CERT_STORE</span>/openssl.cnf &gt; <span class="variable">$F_CERT_STORE</span>/<span class="variable">$DOMAIN_CSR</span></span><br><span class="line">  rm -rf <span class="variable">$F_CERT_STORE</span>/openssl.cnf</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">genDNS</span></span>() &#123;</span><br><span class="line">  DML=<span class="variable">$&#123;DOMAINLIST//,/ &#125;</span></span><br><span class="line">  DNS=</span><br><span class="line">  IX=0</span><br><span class="line">  <span class="keyword">for</span> DOMAIN <span class="keyword">in</span> <span class="variable">$DML</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">"<span class="variable">$IX</span>"</span> -gt <span class="string">"0"</span> ]; <span class="keyword">then</span></span><br><span class="line">      DNS=<span class="variable">$DNS</span><span class="string">','</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    DNS=<span class="variable">$DNS</span><span class="string">'DNS:'</span><span class="variable">$DOMAIN</span></span><br><span class="line">    ((IX+=1))</span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$DNS</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">writeNginxConf</span></span>()&#123;</span><br><span class="line">  <span class="comment"># xTODO 应改成单个域名匹配, 而不是所有域名放置在一起</span></span><br><span class="line">  CONF=$(cat <span class="variable">$BIN_PATH</span>/<span class="variable">$SSL_VERIFY_CONF</span>)</span><br><span class="line">  DML=<span class="variable">$&#123;DOMAINLIST//,/ &#125;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">""</span> &gt; <span class="variable">$F_NGINX_CONF</span>/<span class="variable">$SSL_VERIFY_CONF</span></span><br><span class="line">  <span class="keyword">for</span> DOMAIN <span class="keyword">in</span> <span class="variable">$DML</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    DMS=<span class="variable">$&#123;CONF//\&#123;\&#123;DOMAIN\&#125;</span>\&#125;/<span class="variable">$DOMAIN</span>&#125;</span><br><span class="line">    DMS=<span class="variable">$&#123;DMS//\&#123;\&#123;F_NGINX_VERIFY\&#125;</span>\&#125;/<span class="variable">$F_NGINX_VERIFY</span>&#125;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$DMS</span>"</span> &gt;&gt; <span class="variable">$F_NGINX_CONF</span>/<span class="variable">$SSL_VERIFY_CONF</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">""</span> &gt;&gt; <span class="variable">$F_NGINX_CONF</span>/<span class="variable">$SSL_VERIFY_CONF</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">restartNginx</span></span>()&#123;</span><br><span class="line">  SYSCTL=`<span class="built_in">which</span> systemctl`</span><br><span class="line">  <span class="keyword">if</span> [ ! -z <span class="string">"<span class="variable">$SYSCTL</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="variable">$SYSCTL</span> restart nginx</span><br><span class="line">    <span class="built_in">return</span> 1</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  SERVICE=`<span class="built_in">which</span> service`</span><br><span class="line">  <span class="keyword">if</span> [ ! -z <span class="string">"<span class="variable">$SERVICE</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="variable">$SERVICE</span> nginx restart</span><br><span class="line">    <span class="built_in">return</span> 1</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  <span class="built_in">return</span> 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">fetchCert</span></span>()&#123;</span><br><span class="line">  curl -o <span class="variable">$F_CERT_STORE</span>/acme_tiny.py https://raw.githubusercontent.com/diafygi/acme-tiny/master/acme_tiny.py</span><br><span class="line">  python <span class="variable">$F_CERT_STORE</span>/acme_tiny.py --account-key <span class="variable">$F_CERT_STORE</span>/<span class="variable">$ACCOUNT_KEY</span> \</span><br><span class="line">    --csr <span class="variable">$F_CERT_STORE</span>/<span class="variable">$DOMAIN_CSR</span> --acme-dir <span class="variable">$F_NGINX_VERIFY</span> &gt; <span class="variable">$F_CERT_STORE</span>/<span class="variable">$SIGNED_CRT</span></span><br><span class="line"></span><br><span class="line">  curl -o <span class="variable">$F_CERT_STORE</span>/intermediate.pem https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem</span><br><span class="line">  cat <span class="variable">$F_CERT_STORE</span>/<span class="variable">$SIGNED_CRT</span> <span class="variable">$F_CERT_STORE</span>/intermediate.pem &gt; <span class="variable">$F_CERT_STORE</span>/<span class="variable">$CHAINED_PEM</span></span><br><span class="line"></span><br><span class="line">  curl -o <span class="variable">$F_CERT_STORE</span>/root.pem https://letsencrypt.org/certs/isrgrootx1.pem</span><br><span class="line">  cat <span class="variable">$F_CERT_STORE</span>/intermediate.pem <span class="variable">$F_CERT_STORE</span>/root.pem &gt; <span class="variable">$F_CERT_STORE</span>/full_chained.pem</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">end</span></span>()&#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">''</span></span><br><span class="line">  <span class="built_in">log</span> info <span class="string">'证书配置完成'</span></span><br><span class="line">  <span class="built_in">log</span> info <span class="string">'已配置 https 的域名'</span></span><br><span class="line">  DML=<span class="variable">$&#123;DOMAINLIST//,/ &#125;</span></span><br><span class="line">  <span class="keyword">for</span> DOMAIN <span class="keyword">in</span> <span class="variable">$DML</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\e[1;35m<span class="variable">$DOMAIN</span>\e[0m"</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">''</span></span><br><span class="line">  <span class="built_in">log</span> info <span class="string">' 在 Nginx 中有关证书配置的域名中设定如下配置, 以启用 https'</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">"\e[1;31mlisten              443 ssl;\e[0m"</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">"\e[1;31mssl_certificate     <span class="variable">$F_CERT_STORE</span>/<span class="variable">$CHAINED_PEM</span>;\e[0m"</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">"\e[1;31mssl_certificate_key <span class="variable">$F_CERT_STORE</span>/<span class="variable">$DOMAIN_KEY</span>;\e[0m"</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"有关 Nginx 更多配置: https://imququ.com/post/my-nginx-conf.html"</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">''</span></span><br><span class="line">  <span class="built_in">log</span> info <span class="string">'执行 \e[1;31mcrontab -e\e[0m 命令, 在打开的编辑器中写入下方内容, 以启用定时更新脚本.'</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">"\e[1;31m0 0 1 * * <span class="variable">$F_CERT_STORE</span>/<span class="variable">$SYNC_SH</span> &gt;/dev/null 2&gt;&amp;1\e[0m"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">sync</span></span>()&#123;</span><br><span class="line">  SYNC_SHELL=$(cat <span class="variable">$BIN_PATH</span>/<span class="variable">$SYNC_SH</span>)</span><br><span class="line">  SYNC_SHELL=<span class="variable">$&#123;SYNC_SHELL//\&#123;\&#123;F_CERT_STORE\&#125;</span>\&#125;/<span class="variable">$F_CERT_STORE</span>&#125;</span><br><span class="line">  SYNC_SHELL=<span class="variable">$&#123;SYNC_SHELL//\&#123;\&#123;F_NGINX_VERIFY\&#125;</span>\&#125;/<span class="variable">$F_NGINX_VERIFY</span>&#125;</span><br><span class="line">  SYNC_SHELL=<span class="variable">$&#123;SYNC_SHELL//\&#123;\&#123;ACCOUNT_KEY\&#125;</span>\&#125;/<span class="variable">$ACCOUNT_KEY</span>&#125;</span><br><span class="line">  SYNC_SHELL=<span class="variable">$&#123;SYNC_SHELL//\&#123;\&#123;DOMAIN_CSR\&#125;</span>\&#125;/<span class="variable">$DOMAIN_CSR</span>&#125;</span><br><span class="line">  SYNC_SHELL=<span class="variable">$&#123;SYNC_SHELL//\&#123;\&#123;SIGNED_CRT\&#125;</span>\&#125;/<span class="variable">$SIGNED_CRT</span>&#125;</span><br><span class="line">  SYNC_SHELL=<span class="variable">$&#123;SYNC_SHELL//\&#123;\&#123;CHAINED_PEM\&#125;</span>\&#125;/<span class="variable">$CHAINED_PEM</span>&#125;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"<span class="variable">$SYNC_SHELL</span>"</span> &gt; <span class="variable">$F_CERT_STORE</span>/<span class="variable">$SYNC_SH</span></span><br><span class="line">  chmod +x <span class="variable">$F_CERT_STORE</span>/<span class="variable">$SYNC_SH</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">main</span></span>()&#123;</span><br><span class="line"></span><br><span class="line">  isRoot</span><br><span class="line">  <span class="keyword">if</span> [ $? -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">log</span> error <span class="string">'请使用 root 账户执行'</span></span><br><span class="line">    <span class="built_in">exit</span> 0;</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  userInput</span><br><span class="line">  <span class="keyword">if</span> [ $? -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">exit</span> 0;</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  createAccount</span><br><span class="line"></span><br><span class="line">  createPrivateKey</span><br><span class="line"></span><br><span class="line">  createCSR</span><br><span class="line"></span><br><span class="line">  writeNginxConf</span><br><span class="line"></span><br><span class="line">  restartNginx</span><br><span class="line"></span><br><span class="line">  fetchCert</span><br><span class="line"></span><br><span class="line">  sync</span><br><span class="line"></span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main</span><br></pre></td></tr></table></figure><p><strong>ssl_verify.conf</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  server_name &#123;&#123;DOMAIN&#125;&#125;;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">location</span><span class="regexp"> ^~</span> /.well-known/acme-challenge/ &#123;</span><br><span class="line">    alias &#123;&#123;F_NGINX_VERIFY&#125;&#125;;</span><br><span class="line">    <span class="attribute">try_files</span> <span class="variable">$uri</span> =<span class="number">404</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">location</span> / &#123;</span><br><span class="line">    rewrite ^/(.*)$ https://&#123;&#123;DOMAIN&#125;&#125;/$1 permanent;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>sync.sh</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## #######</span></span><br><span class="line"><span class="comment"># 自动更新脚本</span></span><br><span class="line"><span class="comment"># 此脚本为自动更新模板, 在执行 ecpt.sh 后会创建一个新的脚本并将信息配置为交互时填入的信息且加入到 crontab 中定时执行</span></span><br><span class="line"><span class="comment">## #######</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 证书存储目录</span></span><br><span class="line">F_CERT_STORE=&#123;&#123;F_CERT_STORE&#125;&#125;</span><br><span class="line"><span class="comment">## nginx ssl 验证目录</span></span><br><span class="line">F_NGINX_VERIFY=&#123;&#123;F_NGINX_VERIFY&#125;&#125;</span><br><span class="line"></span><br><span class="line">ACCOUNT_KEY=&#123;&#123;ACCOUNT_KEY&#125;&#125;</span><br><span class="line">DOMAIN_CSR=&#123;&#123;DOMAIN_CSR&#125;&#125;</span><br><span class="line">SIGNED_CRT=&#123;&#123;SIGNED_CRT&#125;&#125;</span><br><span class="line">CHAINED_PEM=&#123;&#123;CHAINED_PEM&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">restartNginx</span></span>()&#123;</span><br><span class="line">  SYSCTL=`<span class="built_in">which</span> systemctl`</span><br><span class="line">  <span class="keyword">if</span> [ ! -z <span class="string">"<span class="variable">$SYSCTL</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="variable">$SYSCTL</span> restart nginx</span><br><span class="line">    <span class="built_in">return</span> 1</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  SERVICE=`<span class="built_in">which</span> service`</span><br><span class="line">  <span class="keyword">if</span> [ ! -z <span class="string">"<span class="variable">$SERVICE</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="variable">$SERVICE</span> nginx restart</span><br><span class="line">    <span class="built_in">return</span> 1</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  <span class="built_in">return</span> 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">python <span class="variable">$F_CERT_STORE</span>/acme_tiny.py --account-key <span class="variable">$F_CERT_STORE</span>/<span class="variable">$ACCOUNT_KEY</span> \</span><br><span class="line">  --csr <span class="variable">$F_CERT_STORE</span>/<span class="variable">$DOMAIN_CSR</span> --acme-dir <span class="variable">$F_NGINX_VERIFY</span> &gt; <span class="variable">$F_CERT_STORE</span>/<span class="variable">$SIGNED_CRT</span> || <span class="built_in">exit</span></span><br><span class="line">curl -o <span class="variable">$F_CERT_STORE</span>/intermediate.pem https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem</span><br><span class="line">cat <span class="variable">$F_CERT_STORE</span>/<span class="variable">$SIGNED_CRT</span> <span class="variable">$F_CERT_STORE</span>/intermediate.pem &gt; <span class="variable">$F_CERT_STORE</span>/<span class="variable">$CHAINED_PEM</span></span><br><span class="line"></span><br><span class="line">restartNginx</span><br></pre></td></tr></table></figure><p>整体目录结构看起来是这样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── ecpt.sh</span><br><span class="line">├── ssl_verify.conf</span><br><span class="line">└── sync.sh</span><br></pre></td></tr></table></figure><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>若执行成功会显示类似如下日志信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">~# .&#x2F;ecpt.sh </span><br><span class="line">* 选择证书存储目录: &#x2F;data&#x2F;cert&#x2F;0u0</span><br><span class="line">* 选择 nginx ssl 验证目录: &#x2F;data&#x2F;wwwroot&#x2F;ssl&#x2F;</span><br><span class="line">* 选择 nginx 自定义配置文件目录: &#x2F;etc&#x2F;nginx&#x2F;conf.d</span><br><span class="line">选择私钥加密类型(RSA&#x2F;ECC)(RSA): </span><br><span class="line">* 输入认证的域名[多个使用 , 区分]: thief.0u0.me</span><br><span class="line">openssl 配置文件地址(&#x2F;etc&#x2F;ssl&#x2F;openssl.cnf): </span><br><span class="line">Generating RSA private key, 4096 bit long modulus</span><br><span class="line">................................................................................++</span><br><span class="line">.................................++</span><br><span class="line">e is 65537 (0x10001)</span><br><span class="line">Generating RSA private key, 4096 bit long modulus</span><br><span class="line">........................................................................................++</span><br><span class="line">................................................................++</span><br><span class="line">e is 65537 (0x10001)</span><br><span class="line"> * Restarting nginx nginx                                                  [OK] </span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100  9151  100  9151    0     0  12225      0 --:--:-- --:--:-- --:--:-- 12217</span><br><span class="line">Parsing account key...</span><br><span class="line">Parsing CSR...</span><br><span class="line">Registering account...</span><br><span class="line">Registered!</span><br><span class="line">Verifying thief.0u0.me...</span><br><span class="line">thief.0u0.me verified!</span><br><span class="line">Signing certificate...</span><br><span class="line">Certificate signed!</span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100  1647  100  1647    0     0   5159      0 --:--:-- --:--:-- --:--:--  5163</span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100  1967  100  1967    0     0  28235      0 --:--:-- --:--:-- --:--:-- 28507</span><br><span class="line"></span><br><span class="line">[INFO]: 证书配置完成</span><br><span class="line">[INFO]: 已配置 https 的域名</span><br><span class="line">thief.0u0.me</span><br><span class="line"></span><br><span class="line">[INFO]:  在 Nginx 中有关证书配置的域名中设定如下配置, 已启用 https</span><br><span class="line">listen              443 ssl;</span><br><span class="line">ssl_certificate     &#x2F;data&#x2F;cert&#x2F;0u0&#x2F;chained.pem;</span><br><span class="line">ssl_certificate_key &#x2F;data&#x2F;cert&#x2F;0u0&#x2F;domain.key;</span><br><span class="line">有关 Nginx 更多配置: https:&#x2F;&#x2F;imququ.com&#x2F;post&#x2F;my-nginx-conf.html</span><br><span class="line"></span><br><span class="line">[INFO]: 执行 crontab -e 命令, 在打开的编辑器中写入下方内容, 以启用定时更新脚本.</span><br><span class="line">0 0 1 * * &#x2F;data&#x2F;cert&#x2F;0u0&#x2F;sync.sh &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1</span><br></pre></td></tr></table></figure><p>运行方式</p><blockquote><p>整个运行过程需要在 root 账户下进行, 可通过 <code>sudo -i</code> 或者 <code>su</code> 命令进入 root 账户</p></blockquote><p><code>ecpt.sh</code> 为执行脚本, <code>sync.sh</code> 为证书定时更新脚本模板, 执行成功后会在第一步输入的证书存放目录生成一个新的可执行脚本, <code>ssl_verify.conf</code> 为 nginx 配置模板, 用于进行 https 站点认证.</p><p>要求输入的信息解释</p><ul><li><p>* 选择证书存储目录: /data/cert/0u0<br>必填, 所有有关 https 证书和此脚本的文件存储均存放在此目录</p></li><li><p>* 选择 nginx ssl 验证目录: /data/wwwroot/ssl/<br>必填,此目录是用于进行站点认证时所访问的路径, 配置与 nginx 中(脚本中自动配置)</p></li><li><p>* 选择 nginx 自定义配置文件目录: /etc/nginx/conf.d<br>必填, nginx 自定义配置路径, 具体路径可通过 <code>/etc/nginx/nginx.conf</code> 中查看, 通常是 <code>include xx</code> 这样的语句</p></li><li><p>选择私钥加密类型(RSA/ECC)(RSA):<br>加密类型, 可选 RSA/ECC 类型, 若选择 ECC 后续还会跳出选择使用 [1: secp256r1]  [2: secp384r1] 算法, 默认 1</p></li><li><p>* 输入认证的域名[多个使用 , 区分]: thief.0u0.me<br>必填, 需要认证的域名, 多个使用 , 区分, 不要输入空格</p></li><li><p>openssl 配置文件地址(/etc/ssl/openssl.cnf):<br>openssl 配文件地址, 脚本中已经预定义了三个路径, 分别是<br><code>/etc/ssl/openssl.cnf</code><br><code>/usr/local/openssl/ssl/openssl.cnf</code><br><code>/etc/pki/tls/openssl.cnf</code><br>如果不输入将默认从这三个路径去找, 但是只要有输入将以输入的地址为最优先地址.</p></li></ul><h2 id="一些坑"><a href="#一些坑" class="headerlink" title="一些坑"></a>一些坑</h2><ul><li>必须要使用 root 账户执行, <code>sudo</code> 在测试时发生了 nginx 不能重启的问题.</li><li>执行 <code>ecpt.sh</code> 进行域名输入时, 多个域名使用半角 <code>,</code> 进行分割, 且不要出现空格(后果未知, 未进行测试).</li><li>执行 <code>ecpt.sh</code> 进行第二步输入 <code>选择 nginx ssl 验证目录</code> 时, 所输入的路径必须要在最后加入 <code>/</code> , 因为此处输入的路径是用于 nginx 的配置中, 若没有 <code>/</code> 会导致后续进行验证失败 (我就是不在脚本给处理了 ╮(╯▽╰)╭ ).</li><li>因 nginx 配置特性, 同一个域名和端口只能够有一个 <code>server</code>, 因此, 在执行本脚本时输入的域名在 nginx 配置中一定不要有 <code>80</code> 端口的其他配置, 否则会导致认证失败.</li><li>执行成功后最后的日志输入, 定时更新脚本未自动写入到 <code>crontab</code> 中, 请手动执行 <code>crontab -e</code> 进行追加 (使用 root 账户).</li></ul><p>关于此脚本所做的事情看文章开始提供的链接查看.</p><p>收工 (￣ω￣) </p><p>喔 不, 看上面的执行日志就看到了, <a href="https://thief.0u0.me" target="_blank" rel="noopener">thief.0u0.me</a> 对 就是这个~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="ssl" scheme="https://blog.3u3.me/tags/ssl/"/>
    
      <category term="lesencrypt" scheme="https://blog.3u3.me/tags/lesencrypt/"/>
    
      <category term="https" scheme="https://blog.3u3.me/tags/https/"/>
    
  </entry>
  
</feed>
